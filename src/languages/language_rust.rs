// This file is generated programmatically to map Rust tree-sitter kinds.

use std::collections::HashMap;
use std::sync::OnceLock;

#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
pub enum Rust {
    End,
    Identifier,
    SEMI,
    MacroRulesBANG,
    LPAREN,
    RPAREN,
    LBRACK,
    RBRACK,
    LBRACE,
    RBRACE,
    EQGT,
    COLON,
    DOLLAR,
    TokenRepetitionCodePatternToken1,
    PLUS,
    STAR,
    QMARK,
    Block2,
    Expr,
    Ident,
    Item,
    Lifetime2,
    Literal,
    Meta,
    Pat,
    Path,
    Stmt,
    Tt,
    Ty,
    Vis,
    PrimitiveType,
    PrimitiveType2,
    PrimitiveType3,
    PrimitiveType4,
    PrimitiveType5,
    PrimitiveType6,
    PrimitiveType7,
    PrimitiveType8,
    PrimitiveType9,
    PrimitiveType10,
    PrimitiveType11,
    PrimitiveType12,
    PrimitiveType13,
    PrimitiveType14,
    PrimitiveType15,
    PrimitiveType16,
    PrimitiveType17,
    DASH,
    SLASH,
    PERCENT,
    CARET,
    BANG,
    AMP,
    PIPE,
    AMPAMP,
    PIPEPIPE,
    LTLT,
    GTGT,
    PLUSEQ,
    DASHEQ,
    STAREQ,
    SLASHEQ,
    PERCENTEQ,
    CARETEQ,
    AMPEQ,
    PIPEEQ,
    LTLTEQ,
    GTGTEQ,
    EQ,
    EQEQ,
    BANGEQ,
    GT,
    LT,
    GTEQ,
    LTEQ,
    AT,
    UNDERSCORE,
    DOT,
    DOTDOT,
    DOTDOTDOT,
    DOTDOTEQ,
    COMMA,
    COLONCOLON,
    DASHGT,
    HASH,
    SQUOTE,
    As,
    Async,
    Await,
    Break,
    Const,
    Continue,
    Default,
    Enum,
    Fn,
    For,
    Gen,
    If,
    Impl,
    Let,
    Loop,
    Match,
    Mod,
    Pub,
    Return,
    Static,
    Struct,
    Trait,
    Type,
    Union,
    Unsafe,
    Use,
    Where,
    While,
    Extern,
    Ref,
    Else,
    In,
    LT2,
    Dyn,
    MutableSpecifier,
    Raw,
    Yield,
    Move,
    Try,
    IntegerLiteral,
    DQUOTE,
    DQUOTE2,
    CharLiteral,
    EscapeSequence,
    True,
    False,
    SLASHSLASH,
    LineCommentToken1,
    LineCommentToken2,
    LineCommentToken3,
    BANG2,
    SLASH2,
    SLASHSTAR,
    STARSLASH,
    Shebang,
    Zelf,
    Super,
    Crate,
    Metavariable,
    StringContent,
    RawStringLiteralStart,
    StringContent2,
    RawStringLiteralEnd,
    FloatLiteral,
    OuterDocCommentMarker,
    InnerDocCommentMarker,
    BlockCommentContent,
    DocComment,
    ErrorSentinel,
    SourceFile,
    Statement,
    EmptyStatement,
    ExpressionStatement,
    MacroDefinition,
    MacroRule,
    TokenCodePattern,
    TokenTreeCodePattern,
    TokenBindingCodePattern,
    TokenRepetitionCodePattern,
    FragmentSpecifier,
    TokenTree,
    TokenRepetition,
    AttributeItem,
    InnerAttributeItem,
    Attribute,
    ModItem,
    ForeignModItem,
    DeclarationList,
    StructItem,
    UnionItem,
    EnumItem,
    EnumVariantList,
    EnumVariant,
    FieldDeclarationList,
    FieldDeclaration,
    OrderedFieldDeclarationList,
    ExternCrateDeclaration,
    ConstItem,
    StaticItem,
    TypeItem,
    FunctionItem,
    FunctionSignatureItem,
    FunctionModifiers,
    WhereClause,
    WherePredicate,
    ImplItem,
    TraitItem,
    AssociatedType,
    TraitBounds,
    HigherRankedTraitBound,
    RemovedTraitBound,
    TypeParameters,
    ConstParameter,
    ConstrainedTypeParameter,
    OptionalTypeParameter,
    LetDeclaration,
    UseDeclaration,
    UseClause,
    ScopedUseList,
    UseList,
    UseAsClause,
    UseWildcard,
    Parameters,
    SelfParameter,
    VariadicParameter,
    Parameter,
    ExternModifier,
    VisibilityModifier,
    Type2,
    BracketedType,
    QualifiedType,
    Lifetime,
    ArrayType,
    ForLifetimes,
    FunctionType,
    TupleType,
    UnitType,
    GenericFunction,
    GenericType,
    GenericTypeWithTurbofish,
    BoundedType,
    TypeArguments,
    TypeBinding,
    ReferenceType,
    PointerType,
    NeverType,
    AbstractType,
    DynamicType,
    ExpressionExceptRange,
    Expression,
    MacroInvocation,
    TokenTree2,
    DelimTokens,
    NonDelimToken,
    ScopedIdentifier,
    ScopedTypeIdentifier,
    ScopedTypeIdentifier2,
    RangeExpression,
    UnaryExpression,
    TryExpression,
    ReferenceExpression,
    BinaryExpression,
    AssignmentExpression,
    CompoundAssignmentExpr,
    TypeCastExpression,
    ReturnExpression,
    YieldExpression,
    CallExpression,
    Arguments,
    ArrayExpression,
    ParenthesizedExpression,
    TupleExpression,
    UnitExpression,
    StructExpression,
    FieldInitializerList,
    ShorthandFieldInitializer,
    FieldInitializer,
    BaseFieldInitializer,
    IfExpression,
    LetCondition,
    LetChain2,
    Condition,
    ElseClause,
    MatchExpression,
    MatchBlock,
    MatchArm,
    MatchArm2,
    MatchCodePattern,
    WhileExpression,
    LoopExpression,
    ForExpression,
    ConstBlock,
    ClosureExpression,
    ClosureParameters,
    Label,
    BreakExpression,
    ContinueExpression,
    IndexExpression,
    AwaitExpression,
    FieldExpression,
    UnsafeBlock,
    AsyncBlock,
    GenBlock,
    TryBlock,
    Block,
    CodePattern,
    TupleCodePattern,
    SliceCodePattern,
    TupleStructCodePattern,
    StructCodePattern,
    FieldCodePattern,
    RemainingFieldCodePattern,
    MutCodePattern,
    RangeCodePattern,
    RefCodePattern,
    CapturedCodePattern,
    ReferenceCodePattern,
    OrCodePattern,
    Literal2,
    LiteralCodePattern,
    NegativeLiteral,
    StringLiteral,
    RawStringLiteral,
    BooleanLiteral,
    LineComment,
    LineDocCommentMarker,
    InnerDocCommentMarker2,
    OuterDocCommentMarker2,
    BlockComment,
    BlockDocCommentMarker,
    SourceFileRepeat1,
    MacroDefinitionRepeat1,
    TokenTreeCodePatternRepeat1,
    TokenTreeRepeat1,
    NonSpecialTokenRepeat1,
    DeclarationListRepeat1,
    EnumVariantListRepeat1,
    EnumVariantListRepeat2,
    FieldDeclarationListRepeat1,
    OrderedFieldDeclarationListRepeat1,
    FunctionModifiersRepeat1,
    WhereClauseRepeat1,
    TraitBoundsRepeat1,
    TypeParametersRepeat1,
    UseListRepeat1,
    ParametersRepeat1,
    ForLifetimesRepeat1,
    TupleTypeRepeat1,
    TypeArgumentsRepeat1,
    DelimTokenTreeRepeat1,
    ArgumentsRepeat1,
    TupleExpressionRepeat1,
    FieldInitializerListRepeat1,
    MatchBlockRepeat1,
    MatchArmRepeat1,
    ClosureParametersRepeat1,
    TupleCodePatternRepeat1,
    SliceCodePatternRepeat1,
    StructCodePatternRepeat1,
    StringLiteralRepeat1,
    FieldIdentifier,
    LetChain,
    ShorthandFieldIdentifier,
    TypeIdentifier,
    Error,
}

const RUST_KIND_MAP: &[(Rust, &str)] = &[
    (Rust::End, "end"),
    (Rust::Identifier, "identifier"),
    (Rust::SEMI, ";"),
    (Rust::MacroRulesBANG, "macro_rules!"),
    (Rust::LPAREN, "("),
    (Rust::RPAREN, ")"),
    (Rust::LBRACK, "["),
    (Rust::RBRACK, "]"),
    (Rust::LBRACE, "{"),
    (Rust::RBRACE, "}"),
    (Rust::EQGT, "=>"),
    (Rust::COLON, ":"),
    (Rust::DOLLAR, "$"),
    (
        Rust::TokenRepetitionCodePatternToken1,
        "token_repetition_pattern_token1",
    ),
    (Rust::PLUS, "+"),
    (Rust::STAR, "*"),
    (Rust::QMARK, "?"),
    (Rust::Block2, "block"),
    (Rust::Expr, "expr"),
    (Rust::Ident, "ident"),
    (Rust::Item, "item"),
    (Rust::Lifetime2, "lifetime"),
    (Rust::Literal, "literal"),
    (Rust::Meta, "meta"),
    (Rust::Pat, "pat"),
    (Rust::Path, "path"),
    (Rust::Stmt, "stmt"),
    (Rust::Tt, "tt"),
    (Rust::Ty, "ty"),
    (Rust::Vis, "vis"),
    (Rust::PrimitiveType, "primitive_type"),
    (Rust::PrimitiveType2, "primitive_type"),
    (Rust::PrimitiveType3, "primitive_type"),
    (Rust::PrimitiveType4, "primitive_type"),
    (Rust::PrimitiveType5, "primitive_type"),
    (Rust::PrimitiveType6, "primitive_type"),
    (Rust::PrimitiveType7, "primitive_type"),
    (Rust::PrimitiveType8, "primitive_type"),
    (Rust::PrimitiveType9, "primitive_type"),
    (Rust::PrimitiveType10, "primitive_type"),
    (Rust::PrimitiveType11, "primitive_type"),
    (Rust::PrimitiveType12, "primitive_type"),
    (Rust::PrimitiveType13, "primitive_type"),
    (Rust::PrimitiveType14, "primitive_type"),
    (Rust::PrimitiveType15, "primitive_type"),
    (Rust::PrimitiveType16, "primitive_type"),
    (Rust::PrimitiveType17, "primitive_type"),
    (Rust::DASH, "-"),
    (Rust::SLASH, "/"),
    (Rust::PERCENT, "%"),
    (Rust::CARET, "^"),
    (Rust::BANG, "!"),
    (Rust::AMP, "&"),
    (Rust::PIPE, "|"),
    (Rust::AMPAMP, "&&"),
    (Rust::PIPEPIPE, "||"),
    (Rust::LTLT, "<<"),
    (Rust::GTGT, ">>"),
    (Rust::PLUSEQ, "+="),
    (Rust::DASHEQ, "-="),
    (Rust::STAREQ, "*="),
    (Rust::SLASHEQ, "/="),
    (Rust::PERCENTEQ, "%="),
    (Rust::CARETEQ, "^="),
    (Rust::AMPEQ, "&="),
    (Rust::PIPEEQ, "|="),
    (Rust::LTLTEQ, "<<="),
    (Rust::GTGTEQ, ">>="),
    (Rust::EQ, "="),
    (Rust::EQEQ, "=="),
    (Rust::BANGEQ, "!="),
    (Rust::GT, ">"),
    (Rust::LT, "<"),
    (Rust::GTEQ, ">="),
    (Rust::LTEQ, "<="),
    (Rust::AT, "@"),
    (Rust::UNDERSCORE, "_"),
    (Rust::DOT, "."),
    (Rust::DOTDOT, ".."),
    (Rust::DOTDOTDOT, "..."),
    (Rust::DOTDOTEQ, "..="),
    (Rust::COMMA, ","),
    (Rust::COLONCOLON, "::"),
    (Rust::DASHGT, "->"),
    (Rust::HASH, "#"),
    (Rust::SQUOTE, "'"),
    (Rust::As, "as"),
    (Rust::Async, "async"),
    (Rust::Await, "await"),
    (Rust::Break, "break"),
    (Rust::Const, "const"),
    (Rust::Continue, "continue"),
    (Rust::Default, "default"),
    (Rust::Enum, "enum"),
    (Rust::Fn, "fn"),
    (Rust::For, "for"),
    (Rust::Gen, "gen"),
    (Rust::If, "if"),
    (Rust::Impl, "impl"),
    (Rust::Let, "let"),
    (Rust::Loop, "loop"),
    (Rust::Match, "match"),
    (Rust::Mod, "mod"),
    (Rust::Pub, "pub"),
    (Rust::Return, "return"),
    (Rust::Static, "static"),
    (Rust::Struct, "struct"),
    (Rust::Trait, "trait"),
    (Rust::Type, "type"),
    (Rust::Union, "union"),
    (Rust::Unsafe, "unsafe"),
    (Rust::Use, "use"),
    (Rust::Where, "where"),
    (Rust::While, "while"),
    (Rust::Extern, "extern"),
    (Rust::Ref, "ref"),
    (Rust::Else, "else"),
    (Rust::In, "in"),
    (Rust::LT2, "<"),
    (Rust::Dyn, "dyn"),
    (Rust::MutableSpecifier, "mutable_specifier"),
    (Rust::Raw, "raw"),
    (Rust::Yield, "yield"),
    (Rust::Move, "move"),
    (Rust::Try, "try"),
    (Rust::IntegerLiteral, "integer_literal"),
    (Rust::DQUOTE, "\\"),
    (Rust::DQUOTE2, "\\"),
    (Rust::CharLiteral, "char_literal"),
    (Rust::EscapeSequence, "escape_sequence"),
    (Rust::True, "true"),
    (Rust::False, "false"),
    (Rust::SLASHSLASH, "//"),
    (Rust::LineCommentToken1, "line_comment_token1"),
    (Rust::LineCommentToken2, "line_comment_token2"),
    (Rust::LineCommentToken3, "line_comment_token3"),
    (Rust::BANG2, "!"),
    (Rust::SLASH2, "/"),
    (Rust::SLASHSTAR, "/*"),
    (Rust::STARSLASH, "*/"),
    (Rust::Shebang, "shebang"),
    (Rust::Zelf, "self"),
    (Rust::Super, "super"),
    (Rust::Crate, "crate"),
    (Rust::Metavariable, "metavariable"),
    (Rust::StringContent, "string_content"),
    (Rust::RawStringLiteralStart, "_raw_string_literal_start"),
    (Rust::StringContent2, "string_content"),
    (Rust::RawStringLiteralEnd, "_raw_string_literal_end"),
    (Rust::FloatLiteral, "float_literal"),
    (Rust::OuterDocCommentMarker, "outer_doc_comment_marker"),
    (Rust::InnerDocCommentMarker, "inner_doc_comment_marker"),
    (Rust::BlockCommentContent, "_block_comment_content"),
    (Rust::DocComment, "doc_comment"),
    (Rust::ErrorSentinel, "_error_sentinel"),
    (Rust::SourceFile, "source_file"),
    (Rust::Statement, "_statement"),
    (Rust::EmptyStatement, "empty_statement"),
    (Rust::ExpressionStatement, "expression_statement"),
    (Rust::MacroDefinition, "macro_definition"),
    (Rust::MacroRule, "macro_rule"),
    (Rust::TokenCodePattern, "_token_pattern"),
    (Rust::TokenTreeCodePattern, "token_tree_pattern"),
    (Rust::TokenBindingCodePattern, "token_binding_pattern"),
    (Rust::TokenRepetitionCodePattern, "token_repetition_pattern"),
    (Rust::FragmentSpecifier, "fragment_specifier"),
    (Rust::TokenTree, "token_tree"),
    (Rust::TokenRepetition, "token_repetition"),
    (Rust::AttributeItem, "attribute_item"),
    (Rust::InnerAttributeItem, "inner_attribute_item"),
    (Rust::Attribute, "attribute"),
    (Rust::ModItem, "mod_item"),
    (Rust::ForeignModItem, "foreign_mod_item"),
    (Rust::DeclarationList, "declaration_list"),
    (Rust::StructItem, "struct_item"),
    (Rust::UnionItem, "union_item"),
    (Rust::EnumItem, "enum_item"),
    (Rust::EnumVariantList, "enum_variant_list"),
    (Rust::EnumVariant, "enum_variant"),
    (Rust::FieldDeclarationList, "field_declaration_list"),
    (Rust::FieldDeclaration, "field_declaration"),
    (
        Rust::OrderedFieldDeclarationList,
        "ordered_field_declaration_list",
    ),
    (Rust::ExternCrateDeclaration, "extern_crate_declaration"),
    (Rust::ConstItem, "const_item"),
    (Rust::StaticItem, "static_item"),
    (Rust::TypeItem, "type_item"),
    (Rust::FunctionItem, "function_item"),
    (Rust::FunctionSignatureItem, "function_signature_item"),
    (Rust::FunctionModifiers, "function_modifiers"),
    (Rust::WhereClause, "where_clause"),
    (Rust::WherePredicate, "where_predicate"),
    (Rust::ImplItem, "impl_item"),
    (Rust::TraitItem, "trait_item"),
    (Rust::AssociatedType, "associated_type"),
    (Rust::TraitBounds, "trait_bounds"),
    (Rust::HigherRankedTraitBound, "higher_ranked_trait_bound"),
    (Rust::RemovedTraitBound, "removed_trait_bound"),
    (Rust::TypeParameters, "type_parameters"),
    (Rust::ConstParameter, "const_parameter"),
    (Rust::ConstrainedTypeParameter, "constrained_type_parameter"),
    (Rust::OptionalTypeParameter, "optional_type_parameter"),
    (Rust::LetDeclaration, "let_declaration"),
    (Rust::UseDeclaration, "use_declaration"),
    (Rust::UseClause, "_use_clause"),
    (Rust::ScopedUseList, "scoped_use_list"),
    (Rust::UseList, "use_list"),
    (Rust::UseAsClause, "use_as_clause"),
    (Rust::UseWildcard, "use_wildcard"),
    (Rust::Parameters, "parameters"),
    (Rust::SelfParameter, "self_parameter"),
    (Rust::VariadicParameter, "variadic_parameter"),
    (Rust::Parameter, "parameter"),
    (Rust::ExternModifier, "extern_modifier"),
    (Rust::VisibilityModifier, "visibility_modifier"),
    (Rust::Type2, "_type"),
    (Rust::BracketedType, "bracketed_type"),
    (Rust::QualifiedType, "qualified_type"),
    (Rust::Lifetime, "lifetime"),
    (Rust::ArrayType, "array_type"),
    (Rust::ForLifetimes, "for_lifetimes"),
    (Rust::FunctionType, "function_type"),
    (Rust::TupleType, "tuple_type"),
    (Rust::UnitType, "unit_type"),
    (Rust::GenericFunction, "generic_function"),
    (Rust::GenericType, "generic_type"),
    (
        Rust::GenericTypeWithTurbofish,
        "generic_type_with_turbofish",
    ),
    (Rust::BoundedType, "bounded_type"),
    (Rust::TypeArguments, "type_arguments"),
    (Rust::TypeBinding, "type_binding"),
    (Rust::ReferenceType, "reference_type"),
    (Rust::PointerType, "pointer_type"),
    (Rust::NeverType, "never_type"),
    (Rust::AbstractType, "abstract_type"),
    (Rust::DynamicType, "dynamic_type"),
    (Rust::ExpressionExceptRange, "_expression_except_range"),
    (Rust::Expression, "_expression"),
    (Rust::MacroInvocation, "macro_invocation"),
    (Rust::TokenTree2, "token_tree"),
    (Rust::DelimTokens, "_delim_tokens"),
    (Rust::NonDelimToken, "_non_delim_token"),
    (Rust::ScopedIdentifier, "scoped_identifier"),
    (Rust::ScopedTypeIdentifier, "scoped_type_identifier"),
    (Rust::ScopedTypeIdentifier2, "scoped_type_identifier"),
    (Rust::RangeExpression, "range_expression"),
    (Rust::UnaryExpression, "unary_expression"),
    (Rust::TryExpression, "try_expression"),
    (Rust::ReferenceExpression, "reference_expression"),
    (Rust::BinaryExpression, "binary_expression"),
    (Rust::AssignmentExpression, "assignment_expression"),
    (Rust::CompoundAssignmentExpr, "compound_assignment_expr"),
    (Rust::TypeCastExpression, "type_cast_expression"),
    (Rust::ReturnExpression, "return_expression"),
    (Rust::YieldExpression, "yield_expression"),
    (Rust::CallExpression, "call_expression"),
    (Rust::Arguments, "arguments"),
    (Rust::ArrayExpression, "array_expression"),
    (Rust::ParenthesizedExpression, "parenthesized_expression"),
    (Rust::TupleExpression, "tuple_expression"),
    (Rust::UnitExpression, "unit_expression"),
    (Rust::StructExpression, "struct_expression"),
    (Rust::FieldInitializerList, "field_initializer_list"),
    (
        Rust::ShorthandFieldInitializer,
        "shorthand_field_initializer",
    ),
    (Rust::FieldInitializer, "field_initializer"),
    (Rust::BaseFieldInitializer, "base_field_initializer"),
    (Rust::IfExpression, "if_expression"),
    (Rust::LetCondition, "let_condition"),
    (Rust::LetChain2, "_let_chain"),
    (Rust::Condition, "_condition"),
    (Rust::ElseClause, "else_clause"),
    (Rust::MatchExpression, "match_expression"),
    (Rust::MatchBlock, "match_block"),
    (Rust::MatchArm, "match_arm"),
    (Rust::MatchArm2, "match_arm"),
    (Rust::MatchCodePattern, "match_pattern"),
    (Rust::WhileExpression, "while_expression"),
    (Rust::LoopExpression, "loop_expression"),
    (Rust::ForExpression, "for_expression"),
    (Rust::ConstBlock, "const_block"),
    (Rust::ClosureExpression, "closure_expression"),
    (Rust::ClosureParameters, "closure_parameters"),
    (Rust::Label, "label"),
    (Rust::BreakExpression, "break_expression"),
    (Rust::ContinueExpression, "continue_expression"),
    (Rust::IndexExpression, "index_expression"),
    (Rust::AwaitExpression, "await_expression"),
    (Rust::FieldExpression, "field_expression"),
    (Rust::UnsafeBlock, "unsafe_block"),
    (Rust::AsyncBlock, "async_block"),
    (Rust::GenBlock, "gen_block"),
    (Rust::TryBlock, "try_block"),
    (Rust::Block, "block"),
    (Rust::CodePattern, "_pattern"),
    (Rust::TupleCodePattern, "tuple_pattern"),
    (Rust::SliceCodePattern, "slice_pattern"),
    (Rust::TupleStructCodePattern, "tuple_struct_pattern"),
    (Rust::StructCodePattern, "struct_pattern"),
    (Rust::FieldCodePattern, "field_pattern"),
    (Rust::RemainingFieldCodePattern, "remaining_field_pattern"),
    (Rust::MutCodePattern, "mut_pattern"),
    (Rust::RangeCodePattern, "range_pattern"),
    (Rust::RefCodePattern, "ref_pattern"),
    (Rust::CapturedCodePattern, "captured_pattern"),
    (Rust::ReferenceCodePattern, "reference_pattern"),
    (Rust::OrCodePattern, "or_pattern"),
    (Rust::Literal2, "_literal"),
    (Rust::LiteralCodePattern, "_literal_pattern"),
    (Rust::NegativeLiteral, "negative_literal"),
    (Rust::StringLiteral, "string_literal"),
    (Rust::RawStringLiteral, "raw_string_literal"),
    (Rust::BooleanLiteral, "boolean_literal"),
    (Rust::LineComment, "line_comment"),
    (Rust::LineDocCommentMarker, "_line_doc_comment_marker"),
    (Rust::InnerDocCommentMarker2, "inner_doc_comment_marker"),
    (Rust::OuterDocCommentMarker2, "outer_doc_comment_marker"),
    (Rust::BlockComment, "block_comment"),
    (Rust::BlockDocCommentMarker, "_block_doc_comment_marker"),
    (Rust::SourceFileRepeat1, "source_file_repeat1"),
    (Rust::MacroDefinitionRepeat1, "macro_definition_repeat1"),
    (
        Rust::TokenTreeCodePatternRepeat1,
        "token_tree_pattern_repeat1",
    ),
    (Rust::TokenTreeRepeat1, "token_tree_repeat1"),
    (Rust::NonSpecialTokenRepeat1, "_non_special_token_repeat1"),
    (Rust::DeclarationListRepeat1, "declaration_list_repeat1"),
    (Rust::EnumVariantListRepeat1, "enum_variant_list_repeat1"),
    (Rust::EnumVariantListRepeat2, "enum_variant_list_repeat2"),
    (
        Rust::FieldDeclarationListRepeat1,
        "field_declaration_list_repeat1",
    ),
    (
        Rust::OrderedFieldDeclarationListRepeat1,
        "ordered_field_declaration_list_repeat1",
    ),
    (Rust::FunctionModifiersRepeat1, "function_modifiers_repeat1"),
    (Rust::WhereClauseRepeat1, "where_clause_repeat1"),
    (Rust::TraitBoundsRepeat1, "trait_bounds_repeat1"),
    (Rust::TypeParametersRepeat1, "type_parameters_repeat1"),
    (Rust::UseListRepeat1, "use_list_repeat1"),
    (Rust::ParametersRepeat1, "parameters_repeat1"),
    (Rust::ForLifetimesRepeat1, "for_lifetimes_repeat1"),
    (Rust::TupleTypeRepeat1, "tuple_type_repeat1"),
    (Rust::TypeArgumentsRepeat1, "type_arguments_repeat1"),
    (Rust::DelimTokenTreeRepeat1, "delim_token_tree_repeat1"),
    (Rust::ArgumentsRepeat1, "arguments_repeat1"),
    (Rust::TupleExpressionRepeat1, "tuple_expression_repeat1"),
    (
        Rust::FieldInitializerListRepeat1,
        "field_initializer_list_repeat1",
    ),
    (Rust::MatchBlockRepeat1, "match_block_repeat1"),
    (Rust::MatchArmRepeat1, "match_arm_repeat1"),
    (Rust::ClosureParametersRepeat1, "closure_parameters_repeat1"),
    (Rust::TupleCodePatternRepeat1, "tuple_pattern_repeat1"),
    (Rust::SliceCodePatternRepeat1, "slice_pattern_repeat1"),
    (Rust::StructCodePatternRepeat1, "struct_pattern_repeat1"),
    (Rust::StringLiteralRepeat1, "string_literal_repeat1"),
    (Rust::FieldIdentifier, "field_identifier"),
    (Rust::LetChain, "let_chain"),
    (Rust::ShorthandFieldIdentifier, "shorthand_field_identifier"),
    (Rust::TypeIdentifier, "type_identifier"),
    (Rust::Error, "ERROR"),
];

fn name_to_rust(name: &str) -> Option<Rust> {
    static MAP: OnceLock<HashMap<&'static str, Rust>> = OnceLock::new();
    let map = MAP.get_or_init(|| {
        let mut map = HashMap::with_capacity(RUST_KIND_MAP.len());
        for &(variant, name) in RUST_KIND_MAP {
            map.insert(name, variant);
        }
        map
    });
    map.get(name).copied()
}

impl From<Rust> for &'static str {
    fn from(tok: Rust) -> Self {
        match tok {
            Rust::End => "end",
            Rust::Identifier => "identifier",
            Rust::SEMI => ";",
            Rust::MacroRulesBANG => "macro_rules!",
            Rust::LPAREN => "(",
            Rust::RPAREN => ")",
            Rust::LBRACK => "[",
            Rust::RBRACK => "]",
            Rust::LBRACE => "{",
            Rust::RBRACE => "}",
            Rust::EQGT => "=>",
            Rust::COLON => ":",
            Rust::DOLLAR => "$",
            Rust::TokenRepetitionCodePatternToken1 => "token_repetition_pattern_token1",
            Rust::PLUS => "+",
            Rust::STAR => "*",
            Rust::QMARK => "?",
            Rust::Block2 => "block",
            Rust::Expr => "expr",
            Rust::Ident => "ident",
            Rust::Item => "item",
            Rust::Lifetime2 => "lifetime",
            Rust::Literal => "literal",
            Rust::Meta => "meta",
            Rust::Pat => "pat",
            Rust::Path => "path",
            Rust::Stmt => "stmt",
            Rust::Tt => "tt",
            Rust::Ty => "ty",
            Rust::Vis => "vis",
            Rust::PrimitiveType => "primitive_type",
            Rust::PrimitiveType2 => "primitive_type",
            Rust::PrimitiveType3 => "primitive_type",
            Rust::PrimitiveType4 => "primitive_type",
            Rust::PrimitiveType5 => "primitive_type",
            Rust::PrimitiveType6 => "primitive_type",
            Rust::PrimitiveType7 => "primitive_type",
            Rust::PrimitiveType8 => "primitive_type",
            Rust::PrimitiveType9 => "primitive_type",
            Rust::PrimitiveType10 => "primitive_type",
            Rust::PrimitiveType11 => "primitive_type",
            Rust::PrimitiveType12 => "primitive_type",
            Rust::PrimitiveType13 => "primitive_type",
            Rust::PrimitiveType14 => "primitive_type",
            Rust::PrimitiveType15 => "primitive_type",
            Rust::PrimitiveType16 => "primitive_type",
            Rust::PrimitiveType17 => "primitive_type",
            Rust::DASH => "-",
            Rust::SLASH => "/",
            Rust::PERCENT => "%",
            Rust::CARET => "^",
            Rust::BANG => "!",
            Rust::AMP => "&",
            Rust::PIPE => "|",
            Rust::AMPAMP => "&&",
            Rust::PIPEPIPE => "||",
            Rust::LTLT => "<<",
            Rust::GTGT => ">>",
            Rust::PLUSEQ => "+=",
            Rust::DASHEQ => "-=",
            Rust::STAREQ => "*=",
            Rust::SLASHEQ => "/=",
            Rust::PERCENTEQ => "%=",
            Rust::CARETEQ => "^=",
            Rust::AMPEQ => "&=",
            Rust::PIPEEQ => "|=",
            Rust::LTLTEQ => "<<=",
            Rust::GTGTEQ => ">>=",
            Rust::EQ => "=",
            Rust::EQEQ => "==",
            Rust::BANGEQ => "!=",
            Rust::GT => ">",
            Rust::LT => "<",
            Rust::GTEQ => ">=",
            Rust::LTEQ => "<=",
            Rust::AT => "@",
            Rust::UNDERSCORE => "_",
            Rust::DOT => ".",
            Rust::DOTDOT => "..",
            Rust::DOTDOTDOT => "...",
            Rust::DOTDOTEQ => "..=",
            Rust::COMMA => ",",
            Rust::COLONCOLON => "::",
            Rust::DASHGT => "->",
            Rust::HASH => "#",
            Rust::SQUOTE => "'",
            Rust::As => "as",
            Rust::Async => "async",
            Rust::Await => "await",
            Rust::Break => "break",
            Rust::Const => "const",
            Rust::Continue => "continue",
            Rust::Default => "default",
            Rust::Enum => "enum",
            Rust::Fn => "fn",
            Rust::For => "for",
            Rust::Gen => "gen",
            Rust::If => "if",
            Rust::Impl => "impl",
            Rust::Let => "let",
            Rust::Loop => "loop",
            Rust::Match => "match",
            Rust::Mod => "mod",
            Rust::Pub => "pub",
            Rust::Return => "return",
            Rust::Static => "static",
            Rust::Struct => "struct",
            Rust::Trait => "trait",
            Rust::Type => "type",
            Rust::Union => "union",
            Rust::Unsafe => "unsafe",
            Rust::Use => "use",
            Rust::Where => "where",
            Rust::While => "while",
            Rust::Extern => "extern",
            Rust::Ref => "ref",
            Rust::Else => "else",
            Rust::In => "in",
            Rust::LT2 => "<",
            Rust::Dyn => "dyn",
            Rust::MutableSpecifier => "mutable_specifier",
            Rust::Raw => "raw",
            Rust::Yield => "yield",
            Rust::Move => "move",
            Rust::Try => "try",
            Rust::IntegerLiteral => "integer_literal",
            Rust::DQUOTE => "\\",
            Rust::DQUOTE2 => "\\",
            Rust::CharLiteral => "char_literal",
            Rust::EscapeSequence => "escape_sequence",
            Rust::True => "true",
            Rust::False => "false",
            Rust::SLASHSLASH => "//",
            Rust::LineCommentToken1 => "line_comment_token1",
            Rust::LineCommentToken2 => "line_comment_token2",
            Rust::LineCommentToken3 => "line_comment_token3",
            Rust::BANG2 => "!",
            Rust::SLASH2 => "/",
            Rust::SLASHSTAR => "/*",
            Rust::STARSLASH => "*/",
            Rust::Shebang => "shebang",
            Rust::Zelf => "self",
            Rust::Super => "super",
            Rust::Crate => "crate",
            Rust::Metavariable => "metavariable",
            Rust::StringContent => "string_content",
            Rust::RawStringLiteralStart => "_raw_string_literal_start",
            Rust::StringContent2 => "string_content",
            Rust::RawStringLiteralEnd => "_raw_string_literal_end",
            Rust::FloatLiteral => "float_literal",
            Rust::OuterDocCommentMarker => "outer_doc_comment_marker",
            Rust::InnerDocCommentMarker => "inner_doc_comment_marker",
            Rust::BlockCommentContent => "_block_comment_content",
            Rust::DocComment => "doc_comment",
            Rust::ErrorSentinel => "_error_sentinel",
            Rust::SourceFile => "source_file",
            Rust::Statement => "_statement",
            Rust::EmptyStatement => "empty_statement",
            Rust::ExpressionStatement => "expression_statement",
            Rust::MacroDefinition => "macro_definition",
            Rust::MacroRule => "macro_rule",
            Rust::TokenCodePattern => "_token_pattern",
            Rust::TokenTreeCodePattern => "token_tree_pattern",
            Rust::TokenBindingCodePattern => "token_binding_pattern",
            Rust::TokenRepetitionCodePattern => "token_repetition_pattern",
            Rust::FragmentSpecifier => "fragment_specifier",
            Rust::TokenTree => "token_tree",
            Rust::TokenRepetition => "token_repetition",
            Rust::AttributeItem => "attribute_item",
            Rust::InnerAttributeItem => "inner_attribute_item",
            Rust::Attribute => "attribute",
            Rust::ModItem => "mod_item",
            Rust::ForeignModItem => "foreign_mod_item",
            Rust::DeclarationList => "declaration_list",
            Rust::StructItem => "struct_item",
            Rust::UnionItem => "union_item",
            Rust::EnumItem => "enum_item",
            Rust::EnumVariantList => "enum_variant_list",
            Rust::EnumVariant => "enum_variant",
            Rust::FieldDeclarationList => "field_declaration_list",
            Rust::FieldDeclaration => "field_declaration",
            Rust::OrderedFieldDeclarationList => "ordered_field_declaration_list",
            Rust::ExternCrateDeclaration => "extern_crate_declaration",
            Rust::ConstItem => "const_item",
            Rust::StaticItem => "static_item",
            Rust::TypeItem => "type_item",
            Rust::FunctionItem => "function_item",
            Rust::FunctionSignatureItem => "function_signature_item",
            Rust::FunctionModifiers => "function_modifiers",
            Rust::WhereClause => "where_clause",
            Rust::WherePredicate => "where_predicate",
            Rust::ImplItem => "impl_item",
            Rust::TraitItem => "trait_item",
            Rust::AssociatedType => "associated_type",
            Rust::TraitBounds => "trait_bounds",
            Rust::HigherRankedTraitBound => "higher_ranked_trait_bound",
            Rust::RemovedTraitBound => "removed_trait_bound",
            Rust::TypeParameters => "type_parameters",
            Rust::ConstParameter => "const_parameter",
            Rust::ConstrainedTypeParameter => "constrained_type_parameter",
            Rust::OptionalTypeParameter => "optional_type_parameter",
            Rust::LetDeclaration => "let_declaration",
            Rust::UseDeclaration => "use_declaration",
            Rust::UseClause => "_use_clause",
            Rust::ScopedUseList => "scoped_use_list",
            Rust::UseList => "use_list",
            Rust::UseAsClause => "use_as_clause",
            Rust::UseWildcard => "use_wildcard",
            Rust::Parameters => "parameters",
            Rust::SelfParameter => "self_parameter",
            Rust::VariadicParameter => "variadic_parameter",
            Rust::Parameter => "parameter",
            Rust::ExternModifier => "extern_modifier",
            Rust::VisibilityModifier => "visibility_modifier",
            Rust::Type2 => "_type",
            Rust::BracketedType => "bracketed_type",
            Rust::QualifiedType => "qualified_type",
            Rust::Lifetime => "lifetime",
            Rust::ArrayType => "array_type",
            Rust::ForLifetimes => "for_lifetimes",
            Rust::FunctionType => "function_type",
            Rust::TupleType => "tuple_type",
            Rust::UnitType => "unit_type",
            Rust::GenericFunction => "generic_function",
            Rust::GenericType => "generic_type",
            Rust::GenericTypeWithTurbofish => "generic_type_with_turbofish",
            Rust::BoundedType => "bounded_type",
            Rust::TypeArguments => "type_arguments",
            Rust::TypeBinding => "type_binding",
            Rust::ReferenceType => "reference_type",
            Rust::PointerType => "pointer_type",
            Rust::NeverType => "never_type",
            Rust::AbstractType => "abstract_type",
            Rust::DynamicType => "dynamic_type",
            Rust::ExpressionExceptRange => "_expression_except_range",
            Rust::Expression => "_expression",
            Rust::MacroInvocation => "macro_invocation",
            Rust::TokenTree2 => "token_tree",
            Rust::DelimTokens => "_delim_tokens",
            Rust::NonDelimToken => "_non_delim_token",
            Rust::ScopedIdentifier => "scoped_identifier",
            Rust::ScopedTypeIdentifier => "scoped_type_identifier",
            Rust::ScopedTypeIdentifier2 => "scoped_type_identifier",
            Rust::RangeExpression => "range_expression",
            Rust::UnaryExpression => "unary_expression",
            Rust::TryExpression => "try_expression",
            Rust::ReferenceExpression => "reference_expression",
            Rust::BinaryExpression => "binary_expression",
            Rust::AssignmentExpression => "assignment_expression",
            Rust::CompoundAssignmentExpr => "compound_assignment_expr",
            Rust::TypeCastExpression => "type_cast_expression",
            Rust::ReturnExpression => "return_expression",
            Rust::YieldExpression => "yield_expression",
            Rust::CallExpression => "call_expression",
            Rust::Arguments => "arguments",
            Rust::ArrayExpression => "array_expression",
            Rust::ParenthesizedExpression => "parenthesized_expression",
            Rust::TupleExpression => "tuple_expression",
            Rust::UnitExpression => "unit_expression",
            Rust::StructExpression => "struct_expression",
            Rust::FieldInitializerList => "field_initializer_list",
            Rust::ShorthandFieldInitializer => "shorthand_field_initializer",
            Rust::FieldInitializer => "field_initializer",
            Rust::BaseFieldInitializer => "base_field_initializer",
            Rust::IfExpression => "if_expression",
            Rust::LetCondition => "let_condition",
            Rust::LetChain2 => "_let_chain",
            Rust::Condition => "_condition",
            Rust::ElseClause => "else_clause",
            Rust::MatchExpression => "match_expression",
            Rust::MatchBlock => "match_block",
            Rust::MatchArm => "match_arm",
            Rust::MatchArm2 => "match_arm",
            Rust::MatchCodePattern => "match_pattern",
            Rust::WhileExpression => "while_expression",
            Rust::LoopExpression => "loop_expression",
            Rust::ForExpression => "for_expression",
            Rust::ConstBlock => "const_block",
            Rust::ClosureExpression => "closure_expression",
            Rust::ClosureParameters => "closure_parameters",
            Rust::Label => "label",
            Rust::BreakExpression => "break_expression",
            Rust::ContinueExpression => "continue_expression",
            Rust::IndexExpression => "index_expression",
            Rust::AwaitExpression => "await_expression",
            Rust::FieldExpression => "field_expression",
            Rust::UnsafeBlock => "unsafe_block",
            Rust::AsyncBlock => "async_block",
            Rust::GenBlock => "gen_block",
            Rust::TryBlock => "try_block",
            Rust::Block => "block",
            Rust::CodePattern => "_pattern",
            Rust::TupleCodePattern => "tuple_pattern",
            Rust::SliceCodePattern => "slice_pattern",
            Rust::TupleStructCodePattern => "tuple_struct_pattern",
            Rust::StructCodePattern => "struct_pattern",
            Rust::FieldCodePattern => "field_pattern",
            Rust::RemainingFieldCodePattern => "remaining_field_pattern",
            Rust::MutCodePattern => "mut_pattern",
            Rust::RangeCodePattern => "range_pattern",
            Rust::RefCodePattern => "ref_pattern",
            Rust::CapturedCodePattern => "captured_pattern",
            Rust::ReferenceCodePattern => "reference_pattern",
            Rust::OrCodePattern => "or_pattern",
            Rust::Literal2 => "_literal",
            Rust::LiteralCodePattern => "_literal_pattern",
            Rust::NegativeLiteral => "negative_literal",
            Rust::StringLiteral => "string_literal",
            Rust::RawStringLiteral => "raw_string_literal",
            Rust::BooleanLiteral => "boolean_literal",
            Rust::LineComment => "line_comment",
            Rust::LineDocCommentMarker => "_line_doc_comment_marker",
            Rust::InnerDocCommentMarker2 => "inner_doc_comment_marker",
            Rust::OuterDocCommentMarker2 => "outer_doc_comment_marker",
            Rust::BlockComment => "block_comment",
            Rust::BlockDocCommentMarker => "_block_doc_comment_marker",
            Rust::SourceFileRepeat1 => "source_file_repeat1",
            Rust::MacroDefinitionRepeat1 => "macro_definition_repeat1",
            Rust::TokenTreeCodePatternRepeat1 => "token_tree_pattern_repeat1",
            Rust::TokenTreeRepeat1 => "token_tree_repeat1",
            Rust::NonSpecialTokenRepeat1 => "_non_special_token_repeat1",
            Rust::DeclarationListRepeat1 => "declaration_list_repeat1",
            Rust::EnumVariantListRepeat1 => "enum_variant_list_repeat1",
            Rust::EnumVariantListRepeat2 => "enum_variant_list_repeat2",
            Rust::FieldDeclarationListRepeat1 => "field_declaration_list_repeat1",
            Rust::OrderedFieldDeclarationListRepeat1 => "ordered_field_declaration_list_repeat1",
            Rust::FunctionModifiersRepeat1 => "function_modifiers_repeat1",
            Rust::WhereClauseRepeat1 => "where_clause_repeat1",
            Rust::TraitBoundsRepeat1 => "trait_bounds_repeat1",
            Rust::TypeParametersRepeat1 => "type_parameters_repeat1",
            Rust::UseListRepeat1 => "use_list_repeat1",
            Rust::ParametersRepeat1 => "parameters_repeat1",
            Rust::ForLifetimesRepeat1 => "for_lifetimes_repeat1",
            Rust::TupleTypeRepeat1 => "tuple_type_repeat1",
            Rust::TypeArgumentsRepeat1 => "type_arguments_repeat1",
            Rust::DelimTokenTreeRepeat1 => "delim_token_tree_repeat1",
            Rust::ArgumentsRepeat1 => "arguments_repeat1",
            Rust::TupleExpressionRepeat1 => "tuple_expression_repeat1",
            Rust::FieldInitializerListRepeat1 => "field_initializer_list_repeat1",
            Rust::MatchBlockRepeat1 => "match_block_repeat1",
            Rust::MatchArmRepeat1 => "match_arm_repeat1",
            Rust::ClosureParametersRepeat1 => "closure_parameters_repeat1",
            Rust::TupleCodePatternRepeat1 => "tuple_pattern_repeat1",
            Rust::SliceCodePatternRepeat1 => "slice_pattern_repeat1",
            Rust::StructCodePatternRepeat1 => "struct_pattern_repeat1",
            Rust::StringLiteralRepeat1 => "string_literal_repeat1",
            Rust::FieldIdentifier => "field_identifier",
            Rust::LetChain => "let_chain",
            Rust::ShorthandFieldIdentifier => "shorthand_field_identifier",
            Rust::TypeIdentifier => "type_identifier",
            Rust::Error => "ERROR",
        }
    }
}

impl From<u16> for Rust {
    fn from(kind_id: u16) -> Self {
        let language: tree_sitter::Language = tree_sitter_rust::LANGUAGE.into();
        if let Some(name) = language.node_kind_for_id(kind_id) {
            if let Some(kind) = name_to_rust(name) {
                return kind;
            }
        }
        Rust::Error
    }
}

impl PartialEq<u16> for Rust {
    fn eq(&self, other: &u16) -> bool {
        *self == Rust::from(*other)
    }
}

impl PartialEq<Rust> for u16 {
    fn eq(&self, other: &Rust) -> bool {
        Rust::from(*self) == *other
    }
}
