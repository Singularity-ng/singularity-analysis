{"$message_type":"diagnostic","message":"the value of the associated types `Getter`, `Abc`, `Cognitive`, `Halstead`, `Loc`, `Wmc`, `Checker`, `Cyclomatic`, `Exit`, `Mi`, `NArgs`, `Nom`, `Npa` and `Npm` in `traits::ParserTrait` must be specified","code":{"code":"E0191","explanation":"An associated type wasn't specified for a trait object.\n\nErroneous code example:\n\n```compile_fail,E0191\ntrait Trait {\n    type Bar;\n}\n\ntype Foo = dyn Trait; // error: the value of the associated type `Bar` (from\n                      //        the trait `Trait`) must be specified\n```\n\nTrait objects need to have all associated types specified. Please verify that\nall associated types of the trait were specified and the correct trait was used.\nExample:\n\n```\ntrait Trait {\n    type Bar;\n}\n\ntype Foo = dyn Trait<Bar=i32>; // ok!\n```\n"},"level":"error","spans":[{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":942,"byte_end":975,"line_start":32,"line_end":32,"column_start":5,"column_end":38,"is_primary":false,"text":[{"text":"    type Checker: Alterator + Checker;","highlight_start":5,"highlight_end":38}],"label":"`Checker` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":981,"byte_end":1000,"line_start":33,"line_end":33,"column_start":5,"column_end":24,"is_primary":false,"text":[{"text":"    type Getter: Getter;","highlight_start":5,"highlight_end":24}],"label":"`Getter` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1006,"byte_end":1031,"line_start":34,"line_end":34,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    type Cognitive: Cognitive;","highlight_start":5,"highlight_end":30}],"label":"`Cognitive` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1037,"byte_end":1064,"line_start":35,"line_end":35,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    type Cyclomatic: Cyclomatic;","highlight_start":5,"highlight_end":32}],"label":"`Cyclomatic` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1070,"byte_end":1093,"line_start":36,"line_end":36,"column_start":5,"column_end":28,"is_primary":false,"text":[{"text":"    type Halstead: Halstead;","highlight_start":5,"highlight_end":28}],"label":"`Halstead` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1099,"byte_end":1112,"line_start":37,"line_end":37,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Loc: Loc;","highlight_start":5,"highlight_end":18}],"label":"`Loc` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1118,"byte_end":1131,"line_start":38,"line_end":38,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Nom: Nom;","highlight_start":5,"highlight_end":18}],"label":"`Nom` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1137,"byte_end":1148,"line_start":39,"line_end":39,"column_start":5,"column_end":16,"is_primary":false,"text":[{"text":"    type Mi: Mi;","highlight_start":5,"highlight_end":16}],"label":"`Mi` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1154,"byte_end":1171,"line_start":40,"line_end":40,"column_start":5,"column_end":22,"is_primary":false,"text":[{"text":"    type NArgs: NArgs;","highlight_start":5,"highlight_end":22}],"label":"`NArgs` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1177,"byte_end":1192,"line_start":41,"line_end":41,"column_start":5,"column_end":20,"is_primary":false,"text":[{"text":"    type Exit: Exit;","highlight_start":5,"highlight_end":20}],"label":"`Exit` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1198,"byte_end":1211,"line_start":42,"line_end":42,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Wmc: Wmc;","highlight_start":5,"highlight_end":18}],"label":"`Wmc` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1217,"byte_end":1230,"line_start":43,"line_end":43,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Abc: Abc;","highlight_start":5,"highlight_end":18}],"label":"`Abc` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1236,"byte_end":1249,"line_start":44,"line_end":44,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Npm: Npm;","highlight_start":5,"highlight_end":18}],"label":"`Npm` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1255,"byte_end":1268,"line_start":45,"line_end":45,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Npa: Npa;","highlight_start":5,"highlight_end":18}],"label":"`Npa` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":4315,"byte_end":4326,"line_start":139,"line_end":139,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"    ) -> Option<Box<dyn ParserTrait>>;","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"specify the associated types","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":4315,"byte_end":4326,"line_start":139,"line_end":139,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"    ) -> Option<Box<dyn ParserTrait>>;","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"ParserTrait<Checker = Type, Getter = Type, Cognitive = Type, Cyclomatic = Type, Halstead = Type, Loc = Type, Nom = Type, Mi = Type, NArgs = Type, Exit = Type, Wmc = Type, Abc = Type, Npm = Type, Npa = Type>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0191]\u001b[0m\u001b[0m\u001b[1m: the value of the associated types `Getter`, `Abc`, `Cognitive`, `Halstead`, `Loc`, `Wmc`, `Checker`, `Cyclomatic`, `Exit`, `Mi`, `NArgs`, `Nom`, `Npa` and `Npm` in `traits::ParserTrait` must be specified\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:139:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Option<Box<dyn ParserTrait>>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: specify the associated types: `ParserTrait<Checker = Type, Getter = Type, Cognitive = Type, Cyclomatic = Type, Halstead = Type, Loc = Type, Nom = Type, Mi = Type, NArgs = Type, Exit = Type, Wmc = Type, Abc = Type, Npm = Type, Npa = Type>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/traits.rs:32:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Checker: Alterator + Checker;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Checker` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Getter: Getter;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Getter` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Cognitive: Cognitive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Cognitive` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Cyclomatic: Cyclomatic;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Cyclomatic` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Halstead: Halstead;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Halstead` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Loc: Loc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Loc` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Nom: Nom;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Nom` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Mi: Mi;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Mi` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type NArgs: NArgs;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`NArgs` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Exit: Exit;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Exit` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Wmc: Wmc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Wmc` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Abc: Abc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Abc` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Npm: Npm;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Npm` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Npa: Npa;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Npa` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the value of the associated types `Getter`, `Abc`, `Cognitive`, `Halstead`, `Loc`, `Wmc`, `Checker`, `Cyclomatic`, `Exit`, `Mi`, `NArgs`, `Nom`, `Npa` and `Npm` in `traits::ParserTrait` must be specified","code":{"code":"E0191","explanation":"An associated type wasn't specified for a trait object.\n\nErroneous code example:\n\n```compile_fail,E0191\ntrait Trait {\n    type Bar;\n}\n\ntype Foo = dyn Trait; // error: the value of the associated type `Bar` (from\n                      //        the trait `Trait`) must be specified\n```\n\nTrait objects need to have all associated types specified. Please verify that\nall associated types of the trait were specified and the correct trait was used.\nExample:\n\n```\ntrait Trait {\n    type Bar;\n}\n\ntype Foo = dyn Trait<Bar=i32>; // ok!\n```\n"},"level":"error","spans":[{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":942,"byte_end":975,"line_start":32,"line_end":32,"column_start":5,"column_end":38,"is_primary":false,"text":[{"text":"    type Checker: Alterator + Checker;","highlight_start":5,"highlight_end":38}],"label":"`Checker` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":981,"byte_end":1000,"line_start":33,"line_end":33,"column_start":5,"column_end":24,"is_primary":false,"text":[{"text":"    type Getter: Getter;","highlight_start":5,"highlight_end":24}],"label":"`Getter` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1006,"byte_end":1031,"line_start":34,"line_end":34,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    type Cognitive: Cognitive;","highlight_start":5,"highlight_end":30}],"label":"`Cognitive` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1037,"byte_end":1064,"line_start":35,"line_end":35,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    type Cyclomatic: Cyclomatic;","highlight_start":5,"highlight_end":32}],"label":"`Cyclomatic` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1070,"byte_end":1093,"line_start":36,"line_end":36,"column_start":5,"column_end":28,"is_primary":false,"text":[{"text":"    type Halstead: Halstead;","highlight_start":5,"highlight_end":28}],"label":"`Halstead` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1099,"byte_end":1112,"line_start":37,"line_end":37,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Loc: Loc;","highlight_start":5,"highlight_end":18}],"label":"`Loc` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1118,"byte_end":1131,"line_start":38,"line_end":38,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Nom: Nom;","highlight_start":5,"highlight_end":18}],"label":"`Nom` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1137,"byte_end":1148,"line_start":39,"line_end":39,"column_start":5,"column_end":16,"is_primary":false,"text":[{"text":"    type Mi: Mi;","highlight_start":5,"highlight_end":16}],"label":"`Mi` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1154,"byte_end":1171,"line_start":40,"line_end":40,"column_start":5,"column_end":22,"is_primary":false,"text":[{"text":"    type NArgs: NArgs;","highlight_start":5,"highlight_end":22}],"label":"`NArgs` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1177,"byte_end":1192,"line_start":41,"line_end":41,"column_start":5,"column_end":20,"is_primary":false,"text":[{"text":"    type Exit: Exit;","highlight_start":5,"highlight_end":20}],"label":"`Exit` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1198,"byte_end":1211,"line_start":42,"line_end":42,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Wmc: Wmc;","highlight_start":5,"highlight_end":18}],"label":"`Wmc` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1217,"byte_end":1230,"line_start":43,"line_end":43,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Abc: Abc;","highlight_start":5,"highlight_end":18}],"label":"`Abc` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1236,"byte_end":1249,"line_start":44,"line_end":44,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Npm: Npm;","highlight_start":5,"highlight_end":18}],"label":"`Npm` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1255,"byte_end":1268,"line_start":45,"line_end":45,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Npa: Npa;","highlight_start":5,"highlight_end":18}],"label":"`Npa` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":5333,"byte_end":5344,"line_start":186,"line_end":186,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"    ) -> Option<Box<dyn ParserTrait>> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"specify the associated types","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":5333,"byte_end":5344,"line_start":186,"line_end":186,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"    ) -> Option<Box<dyn ParserTrait>> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"ParserTrait<Checker = Type, Getter = Type, Cognitive = Type, Cyclomatic = Type, Halstead = Type, Loc = Type, Nom = Type, Mi = Type, NArgs = Type, Exit = Type, Wmc = Type, Abc = Type, Npm = Type, Npa = Type>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0191]\u001b[0m\u001b[0m\u001b[1m: the value of the associated types `Getter`, `Abc`, `Cognitive`, `Halstead`, `Loc`, `Wmc`, `Checker`, `Cyclomatic`, `Exit`, `Mi`, `NArgs`, `Nom`, `Npa` and `Npm` in `traits::ParserTrait` must be specified\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:186:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Option<Box<dyn ParserTrait>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: specify the associated types: `ParserTrait<Checker = Type, Getter = Type, Cognitive = Type, Cyclomatic = Type, Halstead = Type, Loc = Type, Nom = Type, Mi = Type, NArgs = Type, Exit = Type, Wmc = Type, Abc = Type, Npm = Type, Npa = Type>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/traits.rs:32:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Checker: Alterator + Checker;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Checker` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Getter: Getter;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Getter` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Cognitive: Cognitive;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Cognitive` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Cyclomatic: Cyclomatic;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Cyclomatic` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Halstead: Halstead;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Halstead` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Loc: Loc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Loc` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Nom: Nom;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Nom` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Mi: Mi;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Mi` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type NArgs: NArgs;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`NArgs` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Exit: Exit;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Exit` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Wmc: Wmc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Wmc` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Abc: Abc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Abc` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Npm: Npm;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Npm` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Npa: Npa;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Npa` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`T` cannot be shared between threads safely","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":5161,"byte_end":5184,"line_start":179,"line_end":179,"column_start":25,"column_end":48,"is_primary":true,"text":[{"text":"    > ParserFactory for BuiltinParserFactory<T>","highlight_start":25,"highlight_end":48}],"label":"`T` cannot be shared between threads safely","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because it appears within the type `PhantomData<T>`","code":null,"level":"note","spans":[{"file_name":"/build/rustc-1.89.0-src/library/core/src/marker.rs","byte_start":30935,"byte_end":30946,"line_start":815,"line_end":815,"column_start":12,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `BuiltinParserFactory<T>`","code":null,"level":"note","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":4570,"byte_end":4590,"line_start":149,"line_end":149,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"struct BuiltinParserFactory<T> {","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `parser_registry::ParserFactory`","code":null,"level":"note","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":4100,"byte_end":4104,"line_start":132,"line_end":132,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"pub trait ParserFactory: Send + Sync {","highlight_start":33,"highlight_end":37}],"label":"required by this bound in `ParserFactory`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider further restricting type parameter `T` with trait `Sync`","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":5135,"byte_end":5135,"line_start":178,"line_end":178,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"            + Wmc,","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":" + std::marker::Sync","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `T` cannot be shared between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:179:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    > ParserFactory for BuiltinParserFactory<T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`T` cannot be shared between threads safely\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `PhantomData<T>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/build/rustc-1.89.0-src/library/core/src/marker.rs:815:12\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `BuiltinParserFactory<T>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:149:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct BuiltinParserFactory<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `parser_registry::ParserFactory`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:132:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait ParserFactory: Send + Sync {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ParserFactory`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `T` with trait `Sync`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            + Wmc\u001b[0m\u001b[0m\u001b[38;5;10m + std::marker::Sync\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`T` cannot be sent between threads safely","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":5161,"byte_end":5184,"line_start":179,"line_end":179,"column_start":25,"column_end":48,"is_primary":true,"text":[{"text":"    > ParserFactory for BuiltinParserFactory<T>","highlight_start":25,"highlight_end":48}],"label":"`T` cannot be sent between threads safely","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because it appears within the type `PhantomData<T>`","code":null,"level":"note","spans":[{"file_name":"/build/rustc-1.89.0-src/library/core/src/marker.rs","byte_start":30935,"byte_end":30946,"line_start":815,"line_end":815,"column_start":12,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `BuiltinParserFactory<T>`","code":null,"level":"note","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":4570,"byte_end":4590,"line_start":149,"line_end":149,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"struct BuiltinParserFactory<T> {","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `parser_registry::ParserFactory`","code":null,"level":"note","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":4093,"byte_end":4097,"line_start":132,"line_end":132,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"pub trait ParserFactory: Send + Sync {","highlight_start":26,"highlight_end":30}],"label":"required by this bound in `ParserFactory`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider further restricting type parameter `T` with trait `Send`","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":5135,"byte_end":5135,"line_start":178,"line_end":178,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"            + Wmc,","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":" + std::marker::Send","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `T` cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:179:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    > ParserFactory for BuiltinParserFactory<T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`T` cannot be sent between threads safely\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `PhantomData<T>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/build/rustc-1.89.0-src/library/core/src/marker.rs:815:12\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `BuiltinParserFactory<T>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:149:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct BuiltinParserFactory<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `parser_registry::ParserFactory`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:132:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait ParserFactory: Send + Sync {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ParserFactory`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting type parameter `T` with trait `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            + Wmc\u001b[0m\u001b[0m\u001b[38;5;10m + std::marker::Send\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the value of the associated types `Getter`, `Abc`, `Cognitive`, `Halstead`, `Loc`, `Wmc`, `Checker`, `Cyclomatic`, `Exit`, `Mi`, `NArgs`, `Nom`, `Npa` and `Npm` in `traits::ParserTrait` must be specified","code":{"code":"E0191","explanation":"An associated type wasn't specified for a trait object.\n\nErroneous code example:\n\n```compile_fail,E0191\ntrait Trait {\n    type Bar;\n}\n\ntype Foo = dyn Trait; // error: the value of the associated type `Bar` (from\n                      //        the trait `Trait`) must be specified\n```\n\nTrait objects need to have all associated types specified. Please verify that\nall associated types of the trait were specified and the correct trait was used.\nExample:\n\n```\ntrait Trait {\n    type Bar;\n}\n\ntype Foo = dyn Trait<Bar=i32>; // ok!\n```\n"},"level":"error","spans":[{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":942,"byte_end":975,"line_start":32,"line_end":32,"column_start":5,"column_end":38,"is_primary":false,"text":[{"text":"    type Checker: Alterator + Checker;","highlight_start":5,"highlight_end":38}],"label":"`Checker` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":981,"byte_end":1000,"line_start":33,"line_end":33,"column_start":5,"column_end":24,"is_primary":false,"text":[{"text":"    type Getter: Getter;","highlight_start":5,"highlight_end":24}],"label":"`Getter` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1006,"byte_end":1031,"line_start":34,"line_end":34,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    type Cognitive: Cognitive;","highlight_start":5,"highlight_end":30}],"label":"`Cognitive` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1037,"byte_end":1064,"line_start":35,"line_end":35,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    type Cyclomatic: Cyclomatic;","highlight_start":5,"highlight_end":32}],"label":"`Cyclomatic` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1070,"byte_end":1093,"line_start":36,"line_end":36,"column_start":5,"column_end":28,"is_primary":false,"text":[{"text":"    type Halstead: Halstead;","highlight_start":5,"highlight_end":28}],"label":"`Halstead` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1099,"byte_end":1112,"line_start":37,"line_end":37,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Loc: Loc;","highlight_start":5,"highlight_end":18}],"label":"`Loc` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1118,"byte_end":1131,"line_start":38,"line_end":38,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Nom: Nom;","highlight_start":5,"highlight_end":18}],"label":"`Nom` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1137,"byte_end":1148,"line_start":39,"line_end":39,"column_start":5,"column_end":16,"is_primary":false,"text":[{"text":"    type Mi: Mi;","highlight_start":5,"highlight_end":16}],"label":"`Mi` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1154,"byte_end":1171,"line_start":40,"line_end":40,"column_start":5,"column_end":22,"is_primary":false,"text":[{"text":"    type NArgs: NArgs;","highlight_start":5,"highlight_end":22}],"label":"`NArgs` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1177,"byte_end":1192,"line_start":41,"line_end":41,"column_start":5,"column_end":20,"is_primary":false,"text":[{"text":"    type Exit: Exit;","highlight_start":5,"highlight_end":20}],"label":"`Exit` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1198,"byte_end":1211,"line_start":42,"line_end":42,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Wmc: Wmc;","highlight_start":5,"highlight_end":18}],"label":"`Wmc` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1217,"byte_end":1230,"line_start":43,"line_end":43,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Abc: Abc;","highlight_start":5,"highlight_end":18}],"label":"`Abc` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1236,"byte_end":1249,"line_start":44,"line_end":44,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Npm: Npm;","highlight_start":5,"highlight_end":18}],"label":"`Npm` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/traits.rs","byte_start":1255,"byte_end":1268,"line_start":45,"line_end":45,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    type Npa: Npa;","highlight_start":5,"highlight_end":18}],"label":"`Npa` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":1965,"byte_end":1976,"line_start":66,"line_end":66,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"    ) -> Option<Box<dyn ParserTrait>> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"specify the associated types","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":1965,"byte_end":1976,"line_start":66,"line_end":66,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"    ) -> Option<Box<dyn ParserTrait>> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"ParserTrait<Checker = Type, Getter = Type, Cognitive = Type, Cyclomatic = Type, Halstead = Type, Loc = Type, Nom = Type, Mi = Type, NArgs = Type, Exit = Type, Wmc = Type, Abc = Type, Npm = Type, Npa = Type>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0191]\u001b[0m\u001b[0m\u001b[1m: the value of the associated types `Getter`, `Abc`, `Cognitive`, `Halstead`, `Loc`, `Wmc`, `Checker`, `Cyclomatic`, `Exit`, `Mi`, `NArgs`, `Nom`, `Npa` and `Npm` in `traits::ParserTrait` must be specified\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:66:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Option<Box<dyn ParserTrait>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: specify the associated types: `ParserTrait<Checker = Type, Getter = Type, Cognitive = Type, Cyclomatic = Type, Halstead = Type, Loc = Type, Nom = Type, Mi = Type, NArgs = Type, Exit = Type, Wmc = Type, Abc = Type, Npm = Type, Npa = Type>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/traits.rs:32:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Checker: Alterator + Checker;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Checker` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Getter: Getter;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Getter` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Cognitive: Cognitive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Cognitive` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Cyclomatic: Cyclomatic;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Cyclomatic` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Halstead: Halstead;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Halstead` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Loc: Loc;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Loc` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Nom: Nom;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Nom` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Mi: Mi;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Mi` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type NArgs: NArgs;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`NArgs` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Exit: Exit;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Exit` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Wmc: Wmc;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Wmc` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Abc: Abc;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Abc` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Npm: Npm;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Npm` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Npa: Npa;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Npa` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `insert` exists for struct `HashMap<langs::LANG, Box<(dyn parser_registry::ParserFactory + 'static)>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1952,"byte_end":1965,"line_start":70,"line_end":70,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        pub enum LANG {","highlight_start":9,"highlight_end":22}],"label":"doesn't satisfy `langs::LANG: Hash`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9547,"byte_end":9603,"line_start":312,"line_end":312,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        mk_lang!($( ($camel, $name, $display, $description) ),*);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/langs.rs","byte_start":213,"byte_end":3584,"line_start":11,"line_end":156,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"mk_langs!(","highlight_start":1,"highlight_end":11},{"text":"    // 1) Name for enum","highlight_start":1,"highlight_end":24},{"text":"    // 2) Language description","highlight_start":1,"highlight_end":31},{"text":"    // 3) Display name","highlight_start":1,"highlight_end":23},{"text":"    // 4) Empty struct name to implement","highlight_start":1,"highlight_end":41},{"text":"    // 5) Parser name","highlight_start":1,"highlight_end":22},{"text":"    // 6) tree-sitter function to call to get a Language","highlight_start":1,"highlight_end":57},{"text":"    // 7) file extensions","highlight_start":1,"highlight_end":26},{"text":"    // 8) emacs modes","highlight_start":1,"highlight_end":22},{"text":"    // Singularity JS removed - using standard JavaScript parser","highlight_start":1,"highlight_end":65},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Mozjs,","highlight_start":1,"highlight_end":18},{"text":"    //     \"The `Mozjs` language is variant of the `JavaScript` language\",","highlight_start":1,"highlight_end":75},{"text":"    //     \"javascript\",","highlight_start":1,"highlight_end":25},{"text":"    //     MozjsCode,","highlight_start":1,"highlight_end":22},{"text":"    //     MozjsParser,","highlight_start":1,"highlight_end":24},{"text":"    //     tree_sitter_mozjs,","highlight_start":1,"highlight_end":30},{"text":"    //     [js, jsm, mjs, jsx],","highlight_start":1,"highlight_end":32},{"text":"    //     [\"js\", \"js2\"]","highlight_start":1,"highlight_end":25},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Javascript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `JavaScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"javascript\",","highlight_start":1,"highlight_end":22},{"text":"        JavascriptCode,","highlight_start":1,"highlight_end":24},{"text":"        JavascriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_javascript,","highlight_start":1,"highlight_end":32},{"text":"        [],","highlight_start":1,"highlight_end":12},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Java,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Java` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"java\",","highlight_start":1,"highlight_end":16},{"text":"        JavaCode,","highlight_start":1,"highlight_end":18},{"text":"        JavaParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_java,","highlight_start":1,"highlight_end":26},{"text":"        [java],","highlight_start":1,"highlight_end":16},{"text":"        [\"java\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Kotlin temporarily disabled - different tree-sitter interface (uses language() function instead of LANGUAGE)","highlight_start":1,"highlight_end":116},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Kotlin,","highlight_start":1,"highlight_end":19},{"text":"    //     \"The `Kotlin` language\",","highlight_start":1,"highlight_end":36},{"text":"    //     \"kotlin\",","highlight_start":1,"highlight_end":21},{"text":"    //     KotlinCode,","highlight_start":1,"highlight_end":23},{"text":"    //     KotlinParser,","highlight_start":1,"highlight_end":25},{"text":"    //     tree_sitter_kotlin,","highlight_start":1,"highlight_end":31},{"text":"    //     [kt, kts],","highlight_start":1,"highlight_end":22},{"text":"    //     [\"kotlin\"]","highlight_start":1,"highlight_end":22},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Rust,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Rust` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"rust\",","highlight_start":1,"highlight_end":16},{"text":"        RustCode,","highlight_start":1,"highlight_end":18},{"text":"        RustParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_rust,","highlight_start":1,"highlight_end":26},{"text":"        [rs],","highlight_start":1,"highlight_end":14},{"text":"        [\"rust\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Cpp,","highlight_start":1,"highlight_end":13},{"text":"        \"The `C/C++` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"c/c++\",","highlight_start":1,"highlight_end":17},{"text":"        CppCode,","highlight_start":1,"highlight_end":17},{"text":"        CppParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_cpp,","highlight_start":1,"highlight_end":25},{"text":"        [cpp, cxx, cc, hxx, hpp, c, h, hh, inc, mm, m],","highlight_start":1,"highlight_end":56},{"text":"        [\"c++\", \"c\", \"objc\", \"objc++\", \"objective-c++\", \"objective-c\"]","highlight_start":1,"highlight_end":71},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Python,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Python` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"python\",","highlight_start":1,"highlight_end":18},{"text":"        PythonCode,","highlight_start":1,"highlight_end":20},{"text":"        PythonParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_python,","highlight_start":1,"highlight_end":28},{"text":"        [py],","highlight_start":1,"highlight_end":14},{"text":"        [\"python\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Tsx,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Tsx` language incorporates the `JSX` syntax inside `TypeScript`\",","highlight_start":1,"highlight_end":80},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TsxCode,","highlight_start":1,"highlight_end":17},{"text":"        TsxParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_tsx,","highlight_start":1,"highlight_end":25},{"text":"        [tsx],","highlight_start":1,"highlight_end":15},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Typescript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `TypeScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TypescriptCode,","highlight_start":1,"highlight_end":24},{"text":"        TypescriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_typescript,","highlight_start":1,"highlight_end":32},{"text":"        [ts, jsw, jsmw],","highlight_start":1,"highlight_end":25},{"text":"        [\"typescript\"]","highlight_start":1,"highlight_end":23},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // BEAM languages - Full RCA metrics support enabled!","highlight_start":1,"highlight_end":58},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Elixir,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Elixir` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"elixir\",","highlight_start":1,"highlight_end":18},{"text":"        ElixirCode,","highlight_start":1,"highlight_end":20},{"text":"        ElixirParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_elixir,","highlight_start":1,"highlight_end":28},{"text":"        [ex, exs],","highlight_start":1,"highlight_end":19},{"text":"        [\"elixir\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Erlang,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Erlang` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"erlang\",","highlight_start":1,"highlight_end":18},{"text":"        ErlangCode,","highlight_start":1,"highlight_end":20},{"text":"        ErlangParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_erlang,","highlight_start":1,"highlight_end":28},{"text":"        [erl, hrl],","highlight_start":1,"highlight_end":20},{"text":"        [\"erlang\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Gleam,","highlight_start":1,"highlight_end":15},{"text":"        \"The `Gleam` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"gleam\",","highlight_start":1,"highlight_end":17},{"text":"        GleamCode,","highlight_start":1,"highlight_end":19},{"text":"        GleamParser,","highlight_start":1,"highlight_end":21},{"text":"        tree_sitter_gleam,","highlight_start":1,"highlight_end":27},{"text":"        [gleam],","highlight_start":1,"highlight_end":17},{"text":"        [\"gleam\"]","highlight_start":1,"highlight_end":18},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Lua - Scripting language","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Lua,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Lua` language\",","highlight_start":1,"highlight_end":30},{"text":"        \"lua\",","highlight_start":1,"highlight_end":15},{"text":"        LuaCode,","highlight_start":1,"highlight_end":17},{"text":"        LuaParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_lua,","highlight_start":1,"highlight_end":25},{"text":"        [lua],","highlight_start":1,"highlight_end":15},{"text":"        [\"lua\"]","highlight_start":1,"highlight_end":16},{"text":"    ) /* Singularity custom parsers removed - using standard tree-sitter parsers only","highlight_start":1,"highlight_end":86},{"text":"       * - Ccomment: Use standard C/C++ parser for comment analysis","highlight_start":1,"highlight_end":68},{"text":"       * - Preproc: Use standard C/C++ parser for macro analysis */","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"mk_langs!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9351,"byte_end":9372,"line_start":310,"line_end":310,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! mk_langs {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"mk_lang!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1740,"byte_end":1760,"line_start":66,"line_end":66,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! mk_lang {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":1516,"byte_end":1522,"line_start":51,"line_end":51,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"        self.parsers.insert(language, factory);","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`langs::LANG: Hash`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider annotating `langs::LANG` with `#[derive(Hash)]`","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1952,"byte_end":1952,"line_start":70,"line_end":70,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub enum LANG {","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"#[derive(Hash)]\n","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9547,"byte_end":9603,"line_start":312,"line_end":312,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        mk_lang!($( ($camel, $name, $display, $description) ),*);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/langs.rs","byte_start":213,"byte_end":3584,"line_start":11,"line_end":156,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"mk_langs!(","highlight_start":1,"highlight_end":11},{"text":"    // 1) Name for enum","highlight_start":1,"highlight_end":24},{"text":"    // 2) Language description","highlight_start":1,"highlight_end":31},{"text":"    // 3) Display name","highlight_start":1,"highlight_end":23},{"text":"    // 4) Empty struct name to implement","highlight_start":1,"highlight_end":41},{"text":"    // 5) Parser name","highlight_start":1,"highlight_end":22},{"text":"    // 6) tree-sitter function to call to get a Language","highlight_start":1,"highlight_end":57},{"text":"    // 7) file extensions","highlight_start":1,"highlight_end":26},{"text":"    // 8) emacs modes","highlight_start":1,"highlight_end":22},{"text":"    // Singularity JS removed - using standard JavaScript parser","highlight_start":1,"highlight_end":65},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Mozjs,","highlight_start":1,"highlight_end":18},{"text":"    //     \"The `Mozjs` language is variant of the `JavaScript` language\",","highlight_start":1,"highlight_end":75},{"text":"    //     \"javascript\",","highlight_start":1,"highlight_end":25},{"text":"    //     MozjsCode,","highlight_start":1,"highlight_end":22},{"text":"    //     MozjsParser,","highlight_start":1,"highlight_end":24},{"text":"    //     tree_sitter_mozjs,","highlight_start":1,"highlight_end":30},{"text":"    //     [js, jsm, mjs, jsx],","highlight_start":1,"highlight_end":32},{"text":"    //     [\"js\", \"js2\"]","highlight_start":1,"highlight_end":25},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Javascript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `JavaScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"javascript\",","highlight_start":1,"highlight_end":22},{"text":"        JavascriptCode,","highlight_start":1,"highlight_end":24},{"text":"        JavascriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_javascript,","highlight_start":1,"highlight_end":32},{"text":"        [],","highlight_start":1,"highlight_end":12},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Java,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Java` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"java\",","highlight_start":1,"highlight_end":16},{"text":"        JavaCode,","highlight_start":1,"highlight_end":18},{"text":"        JavaParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_java,","highlight_start":1,"highlight_end":26},{"text":"        [java],","highlight_start":1,"highlight_end":16},{"text":"        [\"java\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Kotlin temporarily disabled - different tree-sitter interface (uses language() function instead of LANGUAGE)","highlight_start":1,"highlight_end":116},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Kotlin,","highlight_start":1,"highlight_end":19},{"text":"    //     \"The `Kotlin` language\",","highlight_start":1,"highlight_end":36},{"text":"    //     \"kotlin\",","highlight_start":1,"highlight_end":21},{"text":"    //     KotlinCode,","highlight_start":1,"highlight_end":23},{"text":"    //     KotlinParser,","highlight_start":1,"highlight_end":25},{"text":"    //     tree_sitter_kotlin,","highlight_start":1,"highlight_end":31},{"text":"    //     [kt, kts],","highlight_start":1,"highlight_end":22},{"text":"    //     [\"kotlin\"]","highlight_start":1,"highlight_end":22},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Rust,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Rust` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"rust\",","highlight_start":1,"highlight_end":16},{"text":"        RustCode,","highlight_start":1,"highlight_end":18},{"text":"        RustParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_rust,","highlight_start":1,"highlight_end":26},{"text":"        [rs],","highlight_start":1,"highlight_end":14},{"text":"        [\"rust\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Cpp,","highlight_start":1,"highlight_end":13},{"text":"        \"The `C/C++` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"c/c++\",","highlight_start":1,"highlight_end":17},{"text":"        CppCode,","highlight_start":1,"highlight_end":17},{"text":"        CppParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_cpp,","highlight_start":1,"highlight_end":25},{"text":"        [cpp, cxx, cc, hxx, hpp, c, h, hh, inc, mm, m],","highlight_start":1,"highlight_end":56},{"text":"        [\"c++\", \"c\", \"objc\", \"objc++\", \"objective-c++\", \"objective-c\"]","highlight_start":1,"highlight_end":71},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Python,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Python` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"python\",","highlight_start":1,"highlight_end":18},{"text":"        PythonCode,","highlight_start":1,"highlight_end":20},{"text":"        PythonParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_python,","highlight_start":1,"highlight_end":28},{"text":"        [py],","highlight_start":1,"highlight_end":14},{"text":"        [\"python\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Tsx,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Tsx` language incorporates the `JSX` syntax inside `TypeScript`\",","highlight_start":1,"highlight_end":80},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TsxCode,","highlight_start":1,"highlight_end":17},{"text":"        TsxParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_tsx,","highlight_start":1,"highlight_end":25},{"text":"        [tsx],","highlight_start":1,"highlight_end":15},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Typescript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `TypeScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TypescriptCode,","highlight_start":1,"highlight_end":24},{"text":"        TypescriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_typescript,","highlight_start":1,"highlight_end":32},{"text":"        [ts, jsw, jsmw],","highlight_start":1,"highlight_end":25},{"text":"        [\"typescript\"]","highlight_start":1,"highlight_end":23},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // BEAM languages - Full RCA metrics support enabled!","highlight_start":1,"highlight_end":58},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Elixir,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Elixir` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"elixir\",","highlight_start":1,"highlight_end":18},{"text":"        ElixirCode,","highlight_start":1,"highlight_end":20},{"text":"        ElixirParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_elixir,","highlight_start":1,"highlight_end":28},{"text":"        [ex, exs],","highlight_start":1,"highlight_end":19},{"text":"        [\"elixir\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Erlang,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Erlang` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"erlang\",","highlight_start":1,"highlight_end":18},{"text":"        ErlangCode,","highlight_start":1,"highlight_end":20},{"text":"        ErlangParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_erlang,","highlight_start":1,"highlight_end":28},{"text":"        [erl, hrl],","highlight_start":1,"highlight_end":20},{"text":"        [\"erlang\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Gleam,","highlight_start":1,"highlight_end":15},{"text":"        \"The `Gleam` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"gleam\",","highlight_start":1,"highlight_end":17},{"text":"        GleamCode,","highlight_start":1,"highlight_end":19},{"text":"        GleamParser,","highlight_start":1,"highlight_end":21},{"text":"        tree_sitter_gleam,","highlight_start":1,"highlight_end":27},{"text":"        [gleam],","highlight_start":1,"highlight_end":17},{"text":"        [\"gleam\"]","highlight_start":1,"highlight_end":18},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Lua - Scripting language","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Lua,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Lua` language\",","highlight_start":1,"highlight_end":30},{"text":"        \"lua\",","highlight_start":1,"highlight_end":15},{"text":"        LuaCode,","highlight_start":1,"highlight_end":17},{"text":"        LuaParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_lua,","highlight_start":1,"highlight_end":25},{"text":"        [lua],","highlight_start":1,"highlight_end":15},{"text":"        [\"lua\"]","highlight_start":1,"highlight_end":16},{"text":"    ) /* Singularity custom parsers removed - using standard tree-sitter parsers only","highlight_start":1,"highlight_end":86},{"text":"       * - Ccomment: Use standard C/C++ parser for comment analysis","highlight_start":1,"highlight_end":68},{"text":"       * - Preproc: Use standard C/C++ parser for macro analysis */","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"mk_langs!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9351,"byte_end":9372,"line_start":310,"line_end":310,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! mk_langs {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"mk_lang!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1740,"byte_end":1760,"line_start":66,"line_end":66,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! mk_lang {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `insert` exists for struct `HashMap<langs::LANG, Box<(dyn parser_registry::ParserFactory + 'static)>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:51:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.parsers.insert(language, factory);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/macros.rs:70:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub enum LANG {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `langs::LANG: Hash`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `langs::LANG: Hash`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `langs::LANG` with `#[derive(Hash)]`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/macros.rs:70:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10m#[derive(Hash)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub enum LANG {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `get` exists for struct `HashMap<langs::LANG, Box<(dyn parser_registry::ParserFactory + 'static)>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":1712,"byte_end":1715,"line_start":56,"line_end":56,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"        self.parsers.get(language)","highlight_start":22,"highlight_end":25}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1952,"byte_end":1965,"line_start":70,"line_end":70,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        pub enum LANG {","highlight_start":9,"highlight_end":22}],"label":"doesn't satisfy `langs::LANG: Hash`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9547,"byte_end":9603,"line_start":312,"line_end":312,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        mk_lang!($( ($camel, $name, $display, $description) ),*);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/langs.rs","byte_start":213,"byte_end":3584,"line_start":11,"line_end":156,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"mk_langs!(","highlight_start":1,"highlight_end":11},{"text":"    // 1) Name for enum","highlight_start":1,"highlight_end":24},{"text":"    // 2) Language description","highlight_start":1,"highlight_end":31},{"text":"    // 3) Display name","highlight_start":1,"highlight_end":23},{"text":"    // 4) Empty struct name to implement","highlight_start":1,"highlight_end":41},{"text":"    // 5) Parser name","highlight_start":1,"highlight_end":22},{"text":"    // 6) tree-sitter function to call to get a Language","highlight_start":1,"highlight_end":57},{"text":"    // 7) file extensions","highlight_start":1,"highlight_end":26},{"text":"    // 8) emacs modes","highlight_start":1,"highlight_end":22},{"text":"    // Singularity JS removed - using standard JavaScript parser","highlight_start":1,"highlight_end":65},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Mozjs,","highlight_start":1,"highlight_end":18},{"text":"    //     \"The `Mozjs` language is variant of the `JavaScript` language\",","highlight_start":1,"highlight_end":75},{"text":"    //     \"javascript\",","highlight_start":1,"highlight_end":25},{"text":"    //     MozjsCode,","highlight_start":1,"highlight_end":22},{"text":"    //     MozjsParser,","highlight_start":1,"highlight_end":24},{"text":"    //     tree_sitter_mozjs,","highlight_start":1,"highlight_end":30},{"text":"    //     [js, jsm, mjs, jsx],","highlight_start":1,"highlight_end":32},{"text":"    //     [\"js\", \"js2\"]","highlight_start":1,"highlight_end":25},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Javascript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `JavaScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"javascript\",","highlight_start":1,"highlight_end":22},{"text":"        JavascriptCode,","highlight_start":1,"highlight_end":24},{"text":"        JavascriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_javascript,","highlight_start":1,"highlight_end":32},{"text":"        [],","highlight_start":1,"highlight_end":12},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Java,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Java` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"java\",","highlight_start":1,"highlight_end":16},{"text":"        JavaCode,","highlight_start":1,"highlight_end":18},{"text":"        JavaParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_java,","highlight_start":1,"highlight_end":26},{"text":"        [java],","highlight_start":1,"highlight_end":16},{"text":"        [\"java\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Kotlin temporarily disabled - different tree-sitter interface (uses language() function instead of LANGUAGE)","highlight_start":1,"highlight_end":116},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Kotlin,","highlight_start":1,"highlight_end":19},{"text":"    //     \"The `Kotlin` language\",","highlight_start":1,"highlight_end":36},{"text":"    //     \"kotlin\",","highlight_start":1,"highlight_end":21},{"text":"    //     KotlinCode,","highlight_start":1,"highlight_end":23},{"text":"    //     KotlinParser,","highlight_start":1,"highlight_end":25},{"text":"    //     tree_sitter_kotlin,","highlight_start":1,"highlight_end":31},{"text":"    //     [kt, kts],","highlight_start":1,"highlight_end":22},{"text":"    //     [\"kotlin\"]","highlight_start":1,"highlight_end":22},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Rust,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Rust` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"rust\",","highlight_start":1,"highlight_end":16},{"text":"        RustCode,","highlight_start":1,"highlight_end":18},{"text":"        RustParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_rust,","highlight_start":1,"highlight_end":26},{"text":"        [rs],","highlight_start":1,"highlight_end":14},{"text":"        [\"rust\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Cpp,","highlight_start":1,"highlight_end":13},{"text":"        \"The `C/C++` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"c/c++\",","highlight_start":1,"highlight_end":17},{"text":"        CppCode,","highlight_start":1,"highlight_end":17},{"text":"        CppParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_cpp,","highlight_start":1,"highlight_end":25},{"text":"        [cpp, cxx, cc, hxx, hpp, c, h, hh, inc, mm, m],","highlight_start":1,"highlight_end":56},{"text":"        [\"c++\", \"c\", \"objc\", \"objc++\", \"objective-c++\", \"objective-c\"]","highlight_start":1,"highlight_end":71},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Python,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Python` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"python\",","highlight_start":1,"highlight_end":18},{"text":"        PythonCode,","highlight_start":1,"highlight_end":20},{"text":"        PythonParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_python,","highlight_start":1,"highlight_end":28},{"text":"        [py],","highlight_start":1,"highlight_end":14},{"text":"        [\"python\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Tsx,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Tsx` language incorporates the `JSX` syntax inside `TypeScript`\",","highlight_start":1,"highlight_end":80},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TsxCode,","highlight_start":1,"highlight_end":17},{"text":"        TsxParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_tsx,","highlight_start":1,"highlight_end":25},{"text":"        [tsx],","highlight_start":1,"highlight_end":15},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Typescript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `TypeScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TypescriptCode,","highlight_start":1,"highlight_end":24},{"text":"        TypescriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_typescript,","highlight_start":1,"highlight_end":32},{"text":"        [ts, jsw, jsmw],","highlight_start":1,"highlight_end":25},{"text":"        [\"typescript\"]","highlight_start":1,"highlight_end":23},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // BEAM languages - Full RCA metrics support enabled!","highlight_start":1,"highlight_end":58},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Elixir,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Elixir` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"elixir\",","highlight_start":1,"highlight_end":18},{"text":"        ElixirCode,","highlight_start":1,"highlight_end":20},{"text":"        ElixirParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_elixir,","highlight_start":1,"highlight_end":28},{"text":"        [ex, exs],","highlight_start":1,"highlight_end":19},{"text":"        [\"elixir\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Erlang,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Erlang` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"erlang\",","highlight_start":1,"highlight_end":18},{"text":"        ErlangCode,","highlight_start":1,"highlight_end":20},{"text":"        ErlangParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_erlang,","highlight_start":1,"highlight_end":28},{"text":"        [erl, hrl],","highlight_start":1,"highlight_end":20},{"text":"        [\"erlang\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Gleam,","highlight_start":1,"highlight_end":15},{"text":"        \"The `Gleam` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"gleam\",","highlight_start":1,"highlight_end":17},{"text":"        GleamCode,","highlight_start":1,"highlight_end":19},{"text":"        GleamParser,","highlight_start":1,"highlight_end":21},{"text":"        tree_sitter_gleam,","highlight_start":1,"highlight_end":27},{"text":"        [gleam],","highlight_start":1,"highlight_end":17},{"text":"        [\"gleam\"]","highlight_start":1,"highlight_end":18},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Lua - Scripting language","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Lua,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Lua` language\",","highlight_start":1,"highlight_end":30},{"text":"        \"lua\",","highlight_start":1,"highlight_end":15},{"text":"        LuaCode,","highlight_start":1,"highlight_end":17},{"text":"        LuaParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_lua,","highlight_start":1,"highlight_end":25},{"text":"        [lua],","highlight_start":1,"highlight_end":15},{"text":"        [\"lua\"]","highlight_start":1,"highlight_end":16},{"text":"    ) /* Singularity custom parsers removed - using standard tree-sitter parsers only","highlight_start":1,"highlight_end":86},{"text":"       * - Ccomment: Use standard C/C++ parser for comment analysis","highlight_start":1,"highlight_end":68},{"text":"       * - Preproc: Use standard C/C++ parser for macro analysis */","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"mk_langs!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9351,"byte_end":9372,"line_start":310,"line_end":310,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! mk_langs {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"mk_lang!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1740,"byte_end":1760,"line_start":66,"line_end":66,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! mk_lang {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`langs::LANG: Hash`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider annotating `langs::LANG` with `#[derive(Hash)]`","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1952,"byte_end":1952,"line_start":70,"line_end":70,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub enum LANG {","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"#[derive(Hash)]\n","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9547,"byte_end":9603,"line_start":312,"line_end":312,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        mk_lang!($( ($camel, $name, $display, $description) ),*);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/langs.rs","byte_start":213,"byte_end":3584,"line_start":11,"line_end":156,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"mk_langs!(","highlight_start":1,"highlight_end":11},{"text":"    // 1) Name for enum","highlight_start":1,"highlight_end":24},{"text":"    // 2) Language description","highlight_start":1,"highlight_end":31},{"text":"    // 3) Display name","highlight_start":1,"highlight_end":23},{"text":"    // 4) Empty struct name to implement","highlight_start":1,"highlight_end":41},{"text":"    // 5) Parser name","highlight_start":1,"highlight_end":22},{"text":"    // 6) tree-sitter function to call to get a Language","highlight_start":1,"highlight_end":57},{"text":"    // 7) file extensions","highlight_start":1,"highlight_end":26},{"text":"    // 8) emacs modes","highlight_start":1,"highlight_end":22},{"text":"    // Singularity JS removed - using standard JavaScript parser","highlight_start":1,"highlight_end":65},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Mozjs,","highlight_start":1,"highlight_end":18},{"text":"    //     \"The `Mozjs` language is variant of the `JavaScript` language\",","highlight_start":1,"highlight_end":75},{"text":"    //     \"javascript\",","highlight_start":1,"highlight_end":25},{"text":"    //     MozjsCode,","highlight_start":1,"highlight_end":22},{"text":"    //     MozjsParser,","highlight_start":1,"highlight_end":24},{"text":"    //     tree_sitter_mozjs,","highlight_start":1,"highlight_end":30},{"text":"    //     [js, jsm, mjs, jsx],","highlight_start":1,"highlight_end":32},{"text":"    //     [\"js\", \"js2\"]","highlight_start":1,"highlight_end":25},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Javascript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `JavaScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"javascript\",","highlight_start":1,"highlight_end":22},{"text":"        JavascriptCode,","highlight_start":1,"highlight_end":24},{"text":"        JavascriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_javascript,","highlight_start":1,"highlight_end":32},{"text":"        [],","highlight_start":1,"highlight_end":12},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Java,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Java` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"java\",","highlight_start":1,"highlight_end":16},{"text":"        JavaCode,","highlight_start":1,"highlight_end":18},{"text":"        JavaParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_java,","highlight_start":1,"highlight_end":26},{"text":"        [java],","highlight_start":1,"highlight_end":16},{"text":"        [\"java\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Kotlin temporarily disabled - different tree-sitter interface (uses language() function instead of LANGUAGE)","highlight_start":1,"highlight_end":116},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Kotlin,","highlight_start":1,"highlight_end":19},{"text":"    //     \"The `Kotlin` language\",","highlight_start":1,"highlight_end":36},{"text":"    //     \"kotlin\",","highlight_start":1,"highlight_end":21},{"text":"    //     KotlinCode,","highlight_start":1,"highlight_end":23},{"text":"    //     KotlinParser,","highlight_start":1,"highlight_end":25},{"text":"    //     tree_sitter_kotlin,","highlight_start":1,"highlight_end":31},{"text":"    //     [kt, kts],","highlight_start":1,"highlight_end":22},{"text":"    //     [\"kotlin\"]","highlight_start":1,"highlight_end":22},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Rust,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Rust` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"rust\",","highlight_start":1,"highlight_end":16},{"text":"        RustCode,","highlight_start":1,"highlight_end":18},{"text":"        RustParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_rust,","highlight_start":1,"highlight_end":26},{"text":"        [rs],","highlight_start":1,"highlight_end":14},{"text":"        [\"rust\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Cpp,","highlight_start":1,"highlight_end":13},{"text":"        \"The `C/C++` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"c/c++\",","highlight_start":1,"highlight_end":17},{"text":"        CppCode,","highlight_start":1,"highlight_end":17},{"text":"        CppParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_cpp,","highlight_start":1,"highlight_end":25},{"text":"        [cpp, cxx, cc, hxx, hpp, c, h, hh, inc, mm, m],","highlight_start":1,"highlight_end":56},{"text":"        [\"c++\", \"c\", \"objc\", \"objc++\", \"objective-c++\", \"objective-c\"]","highlight_start":1,"highlight_end":71},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Python,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Python` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"python\",","highlight_start":1,"highlight_end":18},{"text":"        PythonCode,","highlight_start":1,"highlight_end":20},{"text":"        PythonParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_python,","highlight_start":1,"highlight_end":28},{"text":"        [py],","highlight_start":1,"highlight_end":14},{"text":"        [\"python\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Tsx,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Tsx` language incorporates the `JSX` syntax inside `TypeScript`\",","highlight_start":1,"highlight_end":80},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TsxCode,","highlight_start":1,"highlight_end":17},{"text":"        TsxParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_tsx,","highlight_start":1,"highlight_end":25},{"text":"        [tsx],","highlight_start":1,"highlight_end":15},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Typescript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `TypeScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TypescriptCode,","highlight_start":1,"highlight_end":24},{"text":"        TypescriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_typescript,","highlight_start":1,"highlight_end":32},{"text":"        [ts, jsw, jsmw],","highlight_start":1,"highlight_end":25},{"text":"        [\"typescript\"]","highlight_start":1,"highlight_end":23},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // BEAM languages - Full RCA metrics support enabled!","highlight_start":1,"highlight_end":58},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Elixir,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Elixir` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"elixir\",","highlight_start":1,"highlight_end":18},{"text":"        ElixirCode,","highlight_start":1,"highlight_end":20},{"text":"        ElixirParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_elixir,","highlight_start":1,"highlight_end":28},{"text":"        [ex, exs],","highlight_start":1,"highlight_end":19},{"text":"        [\"elixir\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Erlang,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Erlang` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"erlang\",","highlight_start":1,"highlight_end":18},{"text":"        ErlangCode,","highlight_start":1,"highlight_end":20},{"text":"        ErlangParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_erlang,","highlight_start":1,"highlight_end":28},{"text":"        [erl, hrl],","highlight_start":1,"highlight_end":20},{"text":"        [\"erlang\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Gleam,","highlight_start":1,"highlight_end":15},{"text":"        \"The `Gleam` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"gleam\",","highlight_start":1,"highlight_end":17},{"text":"        GleamCode,","highlight_start":1,"highlight_end":19},{"text":"        GleamParser,","highlight_start":1,"highlight_end":21},{"text":"        tree_sitter_gleam,","highlight_start":1,"highlight_end":27},{"text":"        [gleam],","highlight_start":1,"highlight_end":17},{"text":"        [\"gleam\"]","highlight_start":1,"highlight_end":18},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Lua - Scripting language","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Lua,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Lua` language\",","highlight_start":1,"highlight_end":30},{"text":"        \"lua\",","highlight_start":1,"highlight_end":15},{"text":"        LuaCode,","highlight_start":1,"highlight_end":17},{"text":"        LuaParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_lua,","highlight_start":1,"highlight_end":25},{"text":"        [lua],","highlight_start":1,"highlight_end":15},{"text":"        [\"lua\"]","highlight_start":1,"highlight_end":16},{"text":"    ) /* Singularity custom parsers removed - using standard tree-sitter parsers only","highlight_start":1,"highlight_end":86},{"text":"       * - Ccomment: Use standard C/C++ parser for comment analysis","highlight_start":1,"highlight_end":68},{"text":"       * - Preproc: Use standard C/C++ parser for macro analysis */","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"mk_langs!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9351,"byte_end":9372,"line_start":310,"line_end":310,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! mk_langs {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"mk_lang!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1740,"byte_end":1760,"line_start":66,"line_end":66,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! mk_lang {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `get` exists for struct `HashMap<langs::LANG, Box<(dyn parser_registry::ParserFactory + 'static)>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:56:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.parsers.get(language)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/macros.rs:70:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub enum LANG {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `langs::LANG: Hash`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `langs::LANG: Hash`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `langs::LANG` with `#[derive(Hash)]`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/macros.rs:70:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10m#[derive(Hash)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub enum LANG {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `get` exists for struct `HashMap<langs::LANG, Box<(dyn parser_registry::ParserFactory + 'static)>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":2002,"byte_end":2005,"line_start":67,"line_end":67,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"        self.parsers.get(language)?.create_parser(code, path, pr)","highlight_start":22,"highlight_end":25}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1952,"byte_end":1965,"line_start":70,"line_end":70,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        pub enum LANG {","highlight_start":9,"highlight_end":22}],"label":"doesn't satisfy `langs::LANG: Hash`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9547,"byte_end":9603,"line_start":312,"line_end":312,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        mk_lang!($( ($camel, $name, $display, $description) ),*);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/langs.rs","byte_start":213,"byte_end":3584,"line_start":11,"line_end":156,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"mk_langs!(","highlight_start":1,"highlight_end":11},{"text":"    // 1) Name for enum","highlight_start":1,"highlight_end":24},{"text":"    // 2) Language description","highlight_start":1,"highlight_end":31},{"text":"    // 3) Display name","highlight_start":1,"highlight_end":23},{"text":"    // 4) Empty struct name to implement","highlight_start":1,"highlight_end":41},{"text":"    // 5) Parser name","highlight_start":1,"highlight_end":22},{"text":"    // 6) tree-sitter function to call to get a Language","highlight_start":1,"highlight_end":57},{"text":"    // 7) file extensions","highlight_start":1,"highlight_end":26},{"text":"    // 8) emacs modes","highlight_start":1,"highlight_end":22},{"text":"    // Singularity JS removed - using standard JavaScript parser","highlight_start":1,"highlight_end":65},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Mozjs,","highlight_start":1,"highlight_end":18},{"text":"    //     \"The `Mozjs` language is variant of the `JavaScript` language\",","highlight_start":1,"highlight_end":75},{"text":"    //     \"javascript\",","highlight_start":1,"highlight_end":25},{"text":"    //     MozjsCode,","highlight_start":1,"highlight_end":22},{"text":"    //     MozjsParser,","highlight_start":1,"highlight_end":24},{"text":"    //     tree_sitter_mozjs,","highlight_start":1,"highlight_end":30},{"text":"    //     [js, jsm, mjs, jsx],","highlight_start":1,"highlight_end":32},{"text":"    //     [\"js\", \"js2\"]","highlight_start":1,"highlight_end":25},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Javascript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `JavaScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"javascript\",","highlight_start":1,"highlight_end":22},{"text":"        JavascriptCode,","highlight_start":1,"highlight_end":24},{"text":"        JavascriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_javascript,","highlight_start":1,"highlight_end":32},{"text":"        [],","highlight_start":1,"highlight_end":12},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Java,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Java` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"java\",","highlight_start":1,"highlight_end":16},{"text":"        JavaCode,","highlight_start":1,"highlight_end":18},{"text":"        JavaParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_java,","highlight_start":1,"highlight_end":26},{"text":"        [java],","highlight_start":1,"highlight_end":16},{"text":"        [\"java\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Kotlin temporarily disabled - different tree-sitter interface (uses language() function instead of LANGUAGE)","highlight_start":1,"highlight_end":116},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Kotlin,","highlight_start":1,"highlight_end":19},{"text":"    //     \"The `Kotlin` language\",","highlight_start":1,"highlight_end":36},{"text":"    //     \"kotlin\",","highlight_start":1,"highlight_end":21},{"text":"    //     KotlinCode,","highlight_start":1,"highlight_end":23},{"text":"    //     KotlinParser,","highlight_start":1,"highlight_end":25},{"text":"    //     tree_sitter_kotlin,","highlight_start":1,"highlight_end":31},{"text":"    //     [kt, kts],","highlight_start":1,"highlight_end":22},{"text":"    //     [\"kotlin\"]","highlight_start":1,"highlight_end":22},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Rust,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Rust` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"rust\",","highlight_start":1,"highlight_end":16},{"text":"        RustCode,","highlight_start":1,"highlight_end":18},{"text":"        RustParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_rust,","highlight_start":1,"highlight_end":26},{"text":"        [rs],","highlight_start":1,"highlight_end":14},{"text":"        [\"rust\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Cpp,","highlight_start":1,"highlight_end":13},{"text":"        \"The `C/C++` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"c/c++\",","highlight_start":1,"highlight_end":17},{"text":"        CppCode,","highlight_start":1,"highlight_end":17},{"text":"        CppParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_cpp,","highlight_start":1,"highlight_end":25},{"text":"        [cpp, cxx, cc, hxx, hpp, c, h, hh, inc, mm, m],","highlight_start":1,"highlight_end":56},{"text":"        [\"c++\", \"c\", \"objc\", \"objc++\", \"objective-c++\", \"objective-c\"]","highlight_start":1,"highlight_end":71},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Python,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Python` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"python\",","highlight_start":1,"highlight_end":18},{"text":"        PythonCode,","highlight_start":1,"highlight_end":20},{"text":"        PythonParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_python,","highlight_start":1,"highlight_end":28},{"text":"        [py],","highlight_start":1,"highlight_end":14},{"text":"        [\"python\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Tsx,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Tsx` language incorporates the `JSX` syntax inside `TypeScript`\",","highlight_start":1,"highlight_end":80},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TsxCode,","highlight_start":1,"highlight_end":17},{"text":"        TsxParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_tsx,","highlight_start":1,"highlight_end":25},{"text":"        [tsx],","highlight_start":1,"highlight_end":15},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Typescript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `TypeScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TypescriptCode,","highlight_start":1,"highlight_end":24},{"text":"        TypescriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_typescript,","highlight_start":1,"highlight_end":32},{"text":"        [ts, jsw, jsmw],","highlight_start":1,"highlight_end":25},{"text":"        [\"typescript\"]","highlight_start":1,"highlight_end":23},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // BEAM languages - Full RCA metrics support enabled!","highlight_start":1,"highlight_end":58},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Elixir,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Elixir` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"elixir\",","highlight_start":1,"highlight_end":18},{"text":"        ElixirCode,","highlight_start":1,"highlight_end":20},{"text":"        ElixirParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_elixir,","highlight_start":1,"highlight_end":28},{"text":"        [ex, exs],","highlight_start":1,"highlight_end":19},{"text":"        [\"elixir\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Erlang,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Erlang` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"erlang\",","highlight_start":1,"highlight_end":18},{"text":"        ErlangCode,","highlight_start":1,"highlight_end":20},{"text":"        ErlangParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_erlang,","highlight_start":1,"highlight_end":28},{"text":"        [erl, hrl],","highlight_start":1,"highlight_end":20},{"text":"        [\"erlang\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Gleam,","highlight_start":1,"highlight_end":15},{"text":"        \"The `Gleam` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"gleam\",","highlight_start":1,"highlight_end":17},{"text":"        GleamCode,","highlight_start":1,"highlight_end":19},{"text":"        GleamParser,","highlight_start":1,"highlight_end":21},{"text":"        tree_sitter_gleam,","highlight_start":1,"highlight_end":27},{"text":"        [gleam],","highlight_start":1,"highlight_end":17},{"text":"        [\"gleam\"]","highlight_start":1,"highlight_end":18},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Lua - Scripting language","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Lua,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Lua` language\",","highlight_start":1,"highlight_end":30},{"text":"        \"lua\",","highlight_start":1,"highlight_end":15},{"text":"        LuaCode,","highlight_start":1,"highlight_end":17},{"text":"        LuaParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_lua,","highlight_start":1,"highlight_end":25},{"text":"        [lua],","highlight_start":1,"highlight_end":15},{"text":"        [\"lua\"]","highlight_start":1,"highlight_end":16},{"text":"    ) /* Singularity custom parsers removed - using standard tree-sitter parsers only","highlight_start":1,"highlight_end":86},{"text":"       * - Ccomment: Use standard C/C++ parser for comment analysis","highlight_start":1,"highlight_end":68},{"text":"       * - Preproc: Use standard C/C++ parser for macro analysis */","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"mk_langs!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9351,"byte_end":9372,"line_start":310,"line_end":310,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! mk_langs {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"mk_lang!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1740,"byte_end":1760,"line_start":66,"line_end":66,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! mk_lang {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`langs::LANG: Hash`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider annotating `langs::LANG` with `#[derive(Hash)]`","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1952,"byte_end":1952,"line_start":70,"line_end":70,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub enum LANG {","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"#[derive(Hash)]\n","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9547,"byte_end":9603,"line_start":312,"line_end":312,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        mk_lang!($( ($camel, $name, $display, $description) ),*);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/langs.rs","byte_start":213,"byte_end":3584,"line_start":11,"line_end":156,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"mk_langs!(","highlight_start":1,"highlight_end":11},{"text":"    // 1) Name for enum","highlight_start":1,"highlight_end":24},{"text":"    // 2) Language description","highlight_start":1,"highlight_end":31},{"text":"    // 3) Display name","highlight_start":1,"highlight_end":23},{"text":"    // 4) Empty struct name to implement","highlight_start":1,"highlight_end":41},{"text":"    // 5) Parser name","highlight_start":1,"highlight_end":22},{"text":"    // 6) tree-sitter function to call to get a Language","highlight_start":1,"highlight_end":57},{"text":"    // 7) file extensions","highlight_start":1,"highlight_end":26},{"text":"    // 8) emacs modes","highlight_start":1,"highlight_end":22},{"text":"    // Singularity JS removed - using standard JavaScript parser","highlight_start":1,"highlight_end":65},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Mozjs,","highlight_start":1,"highlight_end":18},{"text":"    //     \"The `Mozjs` language is variant of the `JavaScript` language\",","highlight_start":1,"highlight_end":75},{"text":"    //     \"javascript\",","highlight_start":1,"highlight_end":25},{"text":"    //     MozjsCode,","highlight_start":1,"highlight_end":22},{"text":"    //     MozjsParser,","highlight_start":1,"highlight_end":24},{"text":"    //     tree_sitter_mozjs,","highlight_start":1,"highlight_end":30},{"text":"    //     [js, jsm, mjs, jsx],","highlight_start":1,"highlight_end":32},{"text":"    //     [\"js\", \"js2\"]","highlight_start":1,"highlight_end":25},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Javascript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `JavaScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"javascript\",","highlight_start":1,"highlight_end":22},{"text":"        JavascriptCode,","highlight_start":1,"highlight_end":24},{"text":"        JavascriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_javascript,","highlight_start":1,"highlight_end":32},{"text":"        [],","highlight_start":1,"highlight_end":12},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Java,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Java` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"java\",","highlight_start":1,"highlight_end":16},{"text":"        JavaCode,","highlight_start":1,"highlight_end":18},{"text":"        JavaParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_java,","highlight_start":1,"highlight_end":26},{"text":"        [java],","highlight_start":1,"highlight_end":16},{"text":"        [\"java\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Kotlin temporarily disabled - different tree-sitter interface (uses language() function instead of LANGUAGE)","highlight_start":1,"highlight_end":116},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Kotlin,","highlight_start":1,"highlight_end":19},{"text":"    //     \"The `Kotlin` language\",","highlight_start":1,"highlight_end":36},{"text":"    //     \"kotlin\",","highlight_start":1,"highlight_end":21},{"text":"    //     KotlinCode,","highlight_start":1,"highlight_end":23},{"text":"    //     KotlinParser,","highlight_start":1,"highlight_end":25},{"text":"    //     tree_sitter_kotlin,","highlight_start":1,"highlight_end":31},{"text":"    //     [kt, kts],","highlight_start":1,"highlight_end":22},{"text":"    //     [\"kotlin\"]","highlight_start":1,"highlight_end":22},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Rust,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Rust` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"rust\",","highlight_start":1,"highlight_end":16},{"text":"        RustCode,","highlight_start":1,"highlight_end":18},{"text":"        RustParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_rust,","highlight_start":1,"highlight_end":26},{"text":"        [rs],","highlight_start":1,"highlight_end":14},{"text":"        [\"rust\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Cpp,","highlight_start":1,"highlight_end":13},{"text":"        \"The `C/C++` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"c/c++\",","highlight_start":1,"highlight_end":17},{"text":"        CppCode,","highlight_start":1,"highlight_end":17},{"text":"        CppParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_cpp,","highlight_start":1,"highlight_end":25},{"text":"        [cpp, cxx, cc, hxx, hpp, c, h, hh, inc, mm, m],","highlight_start":1,"highlight_end":56},{"text":"        [\"c++\", \"c\", \"objc\", \"objc++\", \"objective-c++\", \"objective-c\"]","highlight_start":1,"highlight_end":71},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Python,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Python` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"python\",","highlight_start":1,"highlight_end":18},{"text":"        PythonCode,","highlight_start":1,"highlight_end":20},{"text":"        PythonParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_python,","highlight_start":1,"highlight_end":28},{"text":"        [py],","highlight_start":1,"highlight_end":14},{"text":"        [\"python\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Tsx,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Tsx` language incorporates the `JSX` syntax inside `TypeScript`\",","highlight_start":1,"highlight_end":80},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TsxCode,","highlight_start":1,"highlight_end":17},{"text":"        TsxParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_tsx,","highlight_start":1,"highlight_end":25},{"text":"        [tsx],","highlight_start":1,"highlight_end":15},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Typescript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `TypeScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TypescriptCode,","highlight_start":1,"highlight_end":24},{"text":"        TypescriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_typescript,","highlight_start":1,"highlight_end":32},{"text":"        [ts, jsw, jsmw],","highlight_start":1,"highlight_end":25},{"text":"        [\"typescript\"]","highlight_start":1,"highlight_end":23},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // BEAM languages - Full RCA metrics support enabled!","highlight_start":1,"highlight_end":58},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Elixir,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Elixir` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"elixir\",","highlight_start":1,"highlight_end":18},{"text":"        ElixirCode,","highlight_start":1,"highlight_end":20},{"text":"        ElixirParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_elixir,","highlight_start":1,"highlight_end":28},{"text":"        [ex, exs],","highlight_start":1,"highlight_end":19},{"text":"        [\"elixir\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Erlang,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Erlang` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"erlang\",","highlight_start":1,"highlight_end":18},{"text":"        ErlangCode,","highlight_start":1,"highlight_end":20},{"text":"        ErlangParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_erlang,","highlight_start":1,"highlight_end":28},{"text":"        [erl, hrl],","highlight_start":1,"highlight_end":20},{"text":"        [\"erlang\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Gleam,","highlight_start":1,"highlight_end":15},{"text":"        \"The `Gleam` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"gleam\",","highlight_start":1,"highlight_end":17},{"text":"        GleamCode,","highlight_start":1,"highlight_end":19},{"text":"        GleamParser,","highlight_start":1,"highlight_end":21},{"text":"        tree_sitter_gleam,","highlight_start":1,"highlight_end":27},{"text":"        [gleam],","highlight_start":1,"highlight_end":17},{"text":"        [\"gleam\"]","highlight_start":1,"highlight_end":18},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Lua - Scripting language","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Lua,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Lua` language\",","highlight_start":1,"highlight_end":30},{"text":"        \"lua\",","highlight_start":1,"highlight_end":15},{"text":"        LuaCode,","highlight_start":1,"highlight_end":17},{"text":"        LuaParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_lua,","highlight_start":1,"highlight_end":25},{"text":"        [lua],","highlight_start":1,"highlight_end":15},{"text":"        [\"lua\"]","highlight_start":1,"highlight_end":16},{"text":"    ) /* Singularity custom parsers removed - using standard tree-sitter parsers only","highlight_start":1,"highlight_end":86},{"text":"       * - Ccomment: Use standard C/C++ parser for comment analysis","highlight_start":1,"highlight_end":68},{"text":"       * - Preproc: Use standard C/C++ parser for macro analysis */","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"mk_langs!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9351,"byte_end":9372,"line_start":310,"line_end":310,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! mk_langs {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"mk_lang!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1740,"byte_end":1760,"line_start":66,"line_end":66,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! mk_lang {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `get` exists for struct `HashMap<langs::LANG, Box<(dyn parser_registry::ParserFactory + 'static)>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:67:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.parsers.get(language)?.create_parser(code, path, pr)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/macros.rs:70:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub enum LANG {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `langs::LANG: Hash`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `langs::LANG: Hash`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `langs::LANG` with `#[derive(Hash)]`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/macros.rs:70:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10m#[derive(Hash)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub enum LANG {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `insert` exists for struct `HashMap<langs::LANG, Box<(dyn parser_registry::ParserFactory + 'static)>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1952,"byte_end":1965,"line_start":70,"line_end":70,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        pub enum LANG {","highlight_start":9,"highlight_end":22}],"label":"doesn't satisfy `langs::LANG: Hash`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9547,"byte_end":9603,"line_start":312,"line_end":312,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        mk_lang!($( ($camel, $name, $display, $description) ),*);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/langs.rs","byte_start":213,"byte_end":3584,"line_start":11,"line_end":156,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"mk_langs!(","highlight_start":1,"highlight_end":11},{"text":"    // 1) Name for enum","highlight_start":1,"highlight_end":24},{"text":"    // 2) Language description","highlight_start":1,"highlight_end":31},{"text":"    // 3) Display name","highlight_start":1,"highlight_end":23},{"text":"    // 4) Empty struct name to implement","highlight_start":1,"highlight_end":41},{"text":"    // 5) Parser name","highlight_start":1,"highlight_end":22},{"text":"    // 6) tree-sitter function to call to get a Language","highlight_start":1,"highlight_end":57},{"text":"    // 7) file extensions","highlight_start":1,"highlight_end":26},{"text":"    // 8) emacs modes","highlight_start":1,"highlight_end":22},{"text":"    // Singularity JS removed - using standard JavaScript parser","highlight_start":1,"highlight_end":65},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Mozjs,","highlight_start":1,"highlight_end":18},{"text":"    //     \"The `Mozjs` language is variant of the `JavaScript` language\",","highlight_start":1,"highlight_end":75},{"text":"    //     \"javascript\",","highlight_start":1,"highlight_end":25},{"text":"    //     MozjsCode,","highlight_start":1,"highlight_end":22},{"text":"    //     MozjsParser,","highlight_start":1,"highlight_end":24},{"text":"    //     tree_sitter_mozjs,","highlight_start":1,"highlight_end":30},{"text":"    //     [js, jsm, mjs, jsx],","highlight_start":1,"highlight_end":32},{"text":"    //     [\"js\", \"js2\"]","highlight_start":1,"highlight_end":25},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Javascript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `JavaScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"javascript\",","highlight_start":1,"highlight_end":22},{"text":"        JavascriptCode,","highlight_start":1,"highlight_end":24},{"text":"        JavascriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_javascript,","highlight_start":1,"highlight_end":32},{"text":"        [],","highlight_start":1,"highlight_end":12},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Java,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Java` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"java\",","highlight_start":1,"highlight_end":16},{"text":"        JavaCode,","highlight_start":1,"highlight_end":18},{"text":"        JavaParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_java,","highlight_start":1,"highlight_end":26},{"text":"        [java],","highlight_start":1,"highlight_end":16},{"text":"        [\"java\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Kotlin temporarily disabled - different tree-sitter interface (uses language() function instead of LANGUAGE)","highlight_start":1,"highlight_end":116},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Kotlin,","highlight_start":1,"highlight_end":19},{"text":"    //     \"The `Kotlin` language\",","highlight_start":1,"highlight_end":36},{"text":"    //     \"kotlin\",","highlight_start":1,"highlight_end":21},{"text":"    //     KotlinCode,","highlight_start":1,"highlight_end":23},{"text":"    //     KotlinParser,","highlight_start":1,"highlight_end":25},{"text":"    //     tree_sitter_kotlin,","highlight_start":1,"highlight_end":31},{"text":"    //     [kt, kts],","highlight_start":1,"highlight_end":22},{"text":"    //     [\"kotlin\"]","highlight_start":1,"highlight_end":22},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Rust,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Rust` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"rust\",","highlight_start":1,"highlight_end":16},{"text":"        RustCode,","highlight_start":1,"highlight_end":18},{"text":"        RustParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_rust,","highlight_start":1,"highlight_end":26},{"text":"        [rs],","highlight_start":1,"highlight_end":14},{"text":"        [\"rust\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Cpp,","highlight_start":1,"highlight_end":13},{"text":"        \"The `C/C++` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"c/c++\",","highlight_start":1,"highlight_end":17},{"text":"        CppCode,","highlight_start":1,"highlight_end":17},{"text":"        CppParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_cpp,","highlight_start":1,"highlight_end":25},{"text":"        [cpp, cxx, cc, hxx, hpp, c, h, hh, inc, mm, m],","highlight_start":1,"highlight_end":56},{"text":"        [\"c++\", \"c\", \"objc\", \"objc++\", \"objective-c++\", \"objective-c\"]","highlight_start":1,"highlight_end":71},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Python,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Python` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"python\",","highlight_start":1,"highlight_end":18},{"text":"        PythonCode,","highlight_start":1,"highlight_end":20},{"text":"        PythonParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_python,","highlight_start":1,"highlight_end":28},{"text":"        [py],","highlight_start":1,"highlight_end":14},{"text":"        [\"python\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Tsx,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Tsx` language incorporates the `JSX` syntax inside `TypeScript`\",","highlight_start":1,"highlight_end":80},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TsxCode,","highlight_start":1,"highlight_end":17},{"text":"        TsxParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_tsx,","highlight_start":1,"highlight_end":25},{"text":"        [tsx],","highlight_start":1,"highlight_end":15},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Typescript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `TypeScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TypescriptCode,","highlight_start":1,"highlight_end":24},{"text":"        TypescriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_typescript,","highlight_start":1,"highlight_end":32},{"text":"        [ts, jsw, jsmw],","highlight_start":1,"highlight_end":25},{"text":"        [\"typescript\"]","highlight_start":1,"highlight_end":23},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // BEAM languages - Full RCA metrics support enabled!","highlight_start":1,"highlight_end":58},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Elixir,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Elixir` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"elixir\",","highlight_start":1,"highlight_end":18},{"text":"        ElixirCode,","highlight_start":1,"highlight_end":20},{"text":"        ElixirParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_elixir,","highlight_start":1,"highlight_end":28},{"text":"        [ex, exs],","highlight_start":1,"highlight_end":19},{"text":"        [\"elixir\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Erlang,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Erlang` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"erlang\",","highlight_start":1,"highlight_end":18},{"text":"        ErlangCode,","highlight_start":1,"highlight_end":20},{"text":"        ErlangParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_erlang,","highlight_start":1,"highlight_end":28},{"text":"        [erl, hrl],","highlight_start":1,"highlight_end":20},{"text":"        [\"erlang\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Gleam,","highlight_start":1,"highlight_end":15},{"text":"        \"The `Gleam` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"gleam\",","highlight_start":1,"highlight_end":17},{"text":"        GleamCode,","highlight_start":1,"highlight_end":19},{"text":"        GleamParser,","highlight_start":1,"highlight_end":21},{"text":"        tree_sitter_gleam,","highlight_start":1,"highlight_end":27},{"text":"        [gleam],","highlight_start":1,"highlight_end":17},{"text":"        [\"gleam\"]","highlight_start":1,"highlight_end":18},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Lua - Scripting language","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Lua,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Lua` language\",","highlight_start":1,"highlight_end":30},{"text":"        \"lua\",","highlight_start":1,"highlight_end":15},{"text":"        LuaCode,","highlight_start":1,"highlight_end":17},{"text":"        LuaParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_lua,","highlight_start":1,"highlight_end":25},{"text":"        [lua],","highlight_start":1,"highlight_end":15},{"text":"        [\"lua\"]","highlight_start":1,"highlight_end":16},{"text":"    ) /* Singularity custom parsers removed - using standard tree-sitter parsers only","highlight_start":1,"highlight_end":86},{"text":"       * - Ccomment: Use standard C/C++ parser for comment analysis","highlight_start":1,"highlight_end":68},{"text":"       * - Preproc: Use standard C/C++ parser for macro analysis */","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"mk_langs!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9351,"byte_end":9372,"line_start":310,"line_end":310,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! mk_langs {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"mk_lang!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1740,"byte_end":1760,"line_start":66,"line_end":66,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! mk_lang {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":3953,"byte_end":3959,"line_start":127,"line_end":127,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"        self.parsers.insert(language, factory);","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`langs::LANG: Hash`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider annotating `langs::LANG` with `#[derive(Hash)]`","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1952,"byte_end":1952,"line_start":70,"line_end":70,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub enum LANG {","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"#[derive(Hash)]\n","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9547,"byte_end":9603,"line_start":312,"line_end":312,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        mk_lang!($( ($camel, $name, $display, $description) ),*);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"packages/singularity-code-analysis/src/langs.rs","byte_start":213,"byte_end":3584,"line_start":11,"line_end":156,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"mk_langs!(","highlight_start":1,"highlight_end":11},{"text":"    // 1) Name for enum","highlight_start":1,"highlight_end":24},{"text":"    // 2) Language description","highlight_start":1,"highlight_end":31},{"text":"    // 3) Display name","highlight_start":1,"highlight_end":23},{"text":"    // 4) Empty struct name to implement","highlight_start":1,"highlight_end":41},{"text":"    // 5) Parser name","highlight_start":1,"highlight_end":22},{"text":"    // 6) tree-sitter function to call to get a Language","highlight_start":1,"highlight_end":57},{"text":"    // 7) file extensions","highlight_start":1,"highlight_end":26},{"text":"    // 8) emacs modes","highlight_start":1,"highlight_end":22},{"text":"    // Singularity JS removed - using standard JavaScript parser","highlight_start":1,"highlight_end":65},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Mozjs,","highlight_start":1,"highlight_end":18},{"text":"    //     \"The `Mozjs` language is variant of the `JavaScript` language\",","highlight_start":1,"highlight_end":75},{"text":"    //     \"javascript\",","highlight_start":1,"highlight_end":25},{"text":"    //     MozjsCode,","highlight_start":1,"highlight_end":22},{"text":"    //     MozjsParser,","highlight_start":1,"highlight_end":24},{"text":"    //     tree_sitter_mozjs,","highlight_start":1,"highlight_end":30},{"text":"    //     [js, jsm, mjs, jsx],","highlight_start":1,"highlight_end":32},{"text":"    //     [\"js\", \"js2\"]","highlight_start":1,"highlight_end":25},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Javascript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `JavaScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"javascript\",","highlight_start":1,"highlight_end":22},{"text":"        JavascriptCode,","highlight_start":1,"highlight_end":24},{"text":"        JavascriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_javascript,","highlight_start":1,"highlight_end":32},{"text":"        [],","highlight_start":1,"highlight_end":12},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Java,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Java` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"java\",","highlight_start":1,"highlight_end":16},{"text":"        JavaCode,","highlight_start":1,"highlight_end":18},{"text":"        JavaParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_java,","highlight_start":1,"highlight_end":26},{"text":"        [java],","highlight_start":1,"highlight_end":16},{"text":"        [\"java\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Kotlin temporarily disabled - different tree-sitter interface (uses language() function instead of LANGUAGE)","highlight_start":1,"highlight_end":116},{"text":"    // (","highlight_start":1,"highlight_end":9},{"text":"    //     Kotlin,","highlight_start":1,"highlight_end":19},{"text":"    //     \"The `Kotlin` language\",","highlight_start":1,"highlight_end":36},{"text":"    //     \"kotlin\",","highlight_start":1,"highlight_end":21},{"text":"    //     KotlinCode,","highlight_start":1,"highlight_end":23},{"text":"    //     KotlinParser,","highlight_start":1,"highlight_end":25},{"text":"    //     tree_sitter_kotlin,","highlight_start":1,"highlight_end":31},{"text":"    //     [kt, kts],","highlight_start":1,"highlight_end":22},{"text":"    //     [\"kotlin\"]","highlight_start":1,"highlight_end":22},{"text":"    // ),","highlight_start":1,"highlight_end":10},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Rust,","highlight_start":1,"highlight_end":14},{"text":"        \"The `Rust` language\",","highlight_start":1,"highlight_end":31},{"text":"        \"rust\",","highlight_start":1,"highlight_end":16},{"text":"        RustCode,","highlight_start":1,"highlight_end":18},{"text":"        RustParser,","highlight_start":1,"highlight_end":20},{"text":"        tree_sitter_rust,","highlight_start":1,"highlight_end":26},{"text":"        [rs],","highlight_start":1,"highlight_end":14},{"text":"        [\"rust\"]","highlight_start":1,"highlight_end":17},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Cpp,","highlight_start":1,"highlight_end":13},{"text":"        \"The `C/C++` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"c/c++\",","highlight_start":1,"highlight_end":17},{"text":"        CppCode,","highlight_start":1,"highlight_end":17},{"text":"        CppParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_cpp,","highlight_start":1,"highlight_end":25},{"text":"        [cpp, cxx, cc, hxx, hpp, c, h, hh, inc, mm, m],","highlight_start":1,"highlight_end":56},{"text":"        [\"c++\", \"c\", \"objc\", \"objc++\", \"objective-c++\", \"objective-c\"]","highlight_start":1,"highlight_end":71},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Python,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Python` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"python\",","highlight_start":1,"highlight_end":18},{"text":"        PythonCode,","highlight_start":1,"highlight_end":20},{"text":"        PythonParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_python,","highlight_start":1,"highlight_end":28},{"text":"        [py],","highlight_start":1,"highlight_end":14},{"text":"        [\"python\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Tsx,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Tsx` language incorporates the `JSX` syntax inside `TypeScript`\",","highlight_start":1,"highlight_end":80},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TsxCode,","highlight_start":1,"highlight_end":17},{"text":"        TsxParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_tsx,","highlight_start":1,"highlight_end":25},{"text":"        [tsx],","highlight_start":1,"highlight_end":15},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Typescript,","highlight_start":1,"highlight_end":20},{"text":"        \"The `TypeScript` language\",","highlight_start":1,"highlight_end":37},{"text":"        \"typescript\",","highlight_start":1,"highlight_end":22},{"text":"        TypescriptCode,","highlight_start":1,"highlight_end":24},{"text":"        TypescriptParser,","highlight_start":1,"highlight_end":26},{"text":"        tree_sitter_typescript,","highlight_start":1,"highlight_end":32},{"text":"        [ts, jsw, jsmw],","highlight_start":1,"highlight_end":25},{"text":"        [\"typescript\"]","highlight_start":1,"highlight_end":23},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // BEAM languages - Full RCA metrics support enabled!","highlight_start":1,"highlight_end":58},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Elixir,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Elixir` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"elixir\",","highlight_start":1,"highlight_end":18},{"text":"        ElixirCode,","highlight_start":1,"highlight_end":20},{"text":"        ElixirParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_elixir,","highlight_start":1,"highlight_end":28},{"text":"        [ex, exs],","highlight_start":1,"highlight_end":19},{"text":"        [\"elixir\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Erlang,","highlight_start":1,"highlight_end":16},{"text":"        \"The `Erlang` language\",","highlight_start":1,"highlight_end":33},{"text":"        \"erlang\",","highlight_start":1,"highlight_end":18},{"text":"        ErlangCode,","highlight_start":1,"highlight_end":20},{"text":"        ErlangParser,","highlight_start":1,"highlight_end":22},{"text":"        tree_sitter_erlang,","highlight_start":1,"highlight_end":28},{"text":"        [erl, hrl],","highlight_start":1,"highlight_end":20},{"text":"        [\"erlang\"]","highlight_start":1,"highlight_end":19},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Gleam,","highlight_start":1,"highlight_end":15},{"text":"        \"The `Gleam` language\",","highlight_start":1,"highlight_end":32},{"text":"        \"gleam\",","highlight_start":1,"highlight_end":17},{"text":"        GleamCode,","highlight_start":1,"highlight_end":19},{"text":"        GleamParser,","highlight_start":1,"highlight_end":21},{"text":"        tree_sitter_gleam,","highlight_start":1,"highlight_end":27},{"text":"        [gleam],","highlight_start":1,"highlight_end":17},{"text":"        [\"gleam\"]","highlight_start":1,"highlight_end":18},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Lua - Scripting language","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        Lua,","highlight_start":1,"highlight_end":13},{"text":"        \"The `Lua` language\",","highlight_start":1,"highlight_end":30},{"text":"        \"lua\",","highlight_start":1,"highlight_end":15},{"text":"        LuaCode,","highlight_start":1,"highlight_end":17},{"text":"        LuaParser,","highlight_start":1,"highlight_end":19},{"text":"        tree_sitter_lua,","highlight_start":1,"highlight_end":25},{"text":"        [lua],","highlight_start":1,"highlight_end":15},{"text":"        [\"lua\"]","highlight_start":1,"highlight_end":16},{"text":"    ) /* Singularity custom parsers removed - using standard tree-sitter parsers only","highlight_start":1,"highlight_end":86},{"text":"       * - Ccomment: Use standard C/C++ parser for comment analysis","highlight_start":1,"highlight_end":68},{"text":"       * - Preproc: Use standard C/C++ parser for macro analysis */","highlight_start":1,"highlight_end":68},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"mk_langs!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":9351,"byte_end":9372,"line_start":310,"line_end":310,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! mk_langs {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"mk_lang!","def_site_span":{"file_name":"packages/singularity-code-analysis/src/macros.rs","byte_start":1740,"byte_end":1760,"line_start":66,"line_end":66,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! mk_lang {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `insert` exists for struct `HashMap<langs::LANG, Box<(dyn parser_registry::ParserFactory + 'static)>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:127:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.parsers.insert(language, factory);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/macros.rs:70:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub enum LANG {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `langs::LANG: Hash`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `langs::LANG: Hash`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `langs::LANG` with `#[derive(Hash)]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/macros.rs:70:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10m#[derive(Hash)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub enum LANG {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":12222,"byte_end":12231,"line_start":388,"line_end":388,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"        let (mut nesting, mut depth, mut lambda) = get_nesting_from_map(node, nesting_map);","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":12222,"byte_end":12226,"line_start":388,"line_end":388,"column_start":27,"column_end":31,"is_primary":true,"text":[{"text":"        let (mut nesting, mut depth, mut lambda) = get_nesting_from_map(node, nesting_map);","highlight_start":27,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/metrics/cognitive.rs:388:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m388\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (mut nesting, mut depth, mut lambda) = get_nesting_from_map(node, nesting_map);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":17738,"byte_end":17739,"line_start":554,"line_end":554,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            _ => {}","highlight_start":13,"highlight_end":14}],"label":"no value can reach this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"multiple earlier patterns match some of the same values","code":null,"level":"note","spans":[{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":16869,"byte_end":16873,"line_start":527,"line_end":527,"column_start":13,"column_end":17,"is_primary":false,"text":[{"text":"            Call => {","highlight_start":13,"highlight_end":17}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":17290,"byte_end":17300,"line_start":539,"line_end":539,"column_start":13,"column_end":23,"is_primary":false,"text":[{"text":"            StabClause => {","highlight_start":13,"highlight_end":23}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":17409,"byte_end":17418,"line_start":543,"line_end":543,"column_start":13,"column_end":22,"is_primary":false,"text":[{"text":"            ElseBlock => {","highlight_start":13,"highlight_end":22}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":17534,"byte_end":17551,"line_start":547,"line_end":547,"column_start":13,"column_end":30,"is_primary":false,"text":[{"text":"            AnonymousFunction => {","highlight_start":13,"highlight_end":30}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":17738,"byte_end":17739,"line_start":554,"line_end":554,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            _ => {}","highlight_start":13,"highlight_end":14}],"label":"...and 1 other patterns collectively make this unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[warn(unreachable_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/metrics/cognitive.rs:554:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m554\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _ => {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno value can reach this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: multiple earlier patterns match some of the same values\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/metrics/cognitive.rs:554:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Call => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m539\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            StabClause => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ElseBlock => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m547\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            AnonymousFunction => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m554\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _ => {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m...and 1 other patterns collectively make this unreachable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_patterns)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `BinaryOp`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":17655,"byte_end":17663,"line_start":551,"line_end":551,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"            BinaryOp => {","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":17655,"byte_end":17663,"line_start":551,"line_end":551,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"            BinaryOp => {","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":"_BinaryOp","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `BinaryOp`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/metrics/cognitive.rs:551:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m551\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            BinaryOp => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_BinaryOp`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":16752,"byte_end":16761,"line_start":524,"line_end":524,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"        let (mut nesting, mut depth, mut lambda) = get_nesting_from_map(node, nesting_map);","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":16752,"byte_end":16756,"line_start":524,"line_end":524,"column_start":27,"column_end":31,"is_primary":true,"text":[{"text":"        let (mut nesting, mut depth, mut lambda) = get_nesting_from_map(node, nesting_map);","highlight_start":27,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/metrics/cognitive.rs:524:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (mut nesting, mut depth, mut lambda) = get_nesting_from_map(node, nesting_map);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":19202,"byte_end":19211,"line_start":607,"line_end":607,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"        let (mut nesting, mut depth, mut lambda) = get_nesting_from_map(node, nesting_map);","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"packages/singularity-code-analysis/src/metrics/cognitive.rs","byte_start":19202,"byte_end":19206,"line_start":607,"line_end":607,"column_start":27,"column_end":31,"is_primary":true,"text":[{"text":"        let (mut nesting, mut depth, mut lambda) = get_nesting_from_map(node, nesting_map);","highlight_start":27,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/metrics/cognitive.rs:607:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m607\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (mut nesting, mut depth, mut lambda) = get_nesting_from_map(node, nesting_map);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":6239,"byte_end":6240,"line_start":206,"line_end":206,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            _ => vec![],","highlight_start":13,"highlight_end":14}],"label":"no value can reach this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"multiple earlier patterns match some of the same values","code":null,"level":"note","spans":[{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":5692,"byte_end":5708,"line_start":195,"line_end":195,"column_start":13,"column_end":29,"is_primary":false,"text":[{"text":"            LANG::Javascript => vec![\"js\", \"mjs\", \"jsx\"],","highlight_start":13,"highlight_end":29}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":5750,"byte_end":5760,"line_start":196,"line_end":196,"column_start":13,"column_end":23,"is_primary":false,"text":[{"text":"            LANG::Java => vec![\"java\"],","highlight_start":13,"highlight_end":23}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":5790,"byte_end":5800,"line_start":197,"line_end":197,"column_start":13,"column_end":23,"is_primary":false,"text":[{"text":"            LANG::Rust => vec![\"rs\"],","highlight_start":13,"highlight_end":23}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":5828,"byte_end":5837,"line_start":198,"line_end":198,"column_start":13,"column_end":22,"is_primary":false,"text":[{"text":"            LANG::Cpp => vec![\"cpp\", \"cxx\", \"cc\", \"hxx\", \"hpp\", \"c\", \"h\", \"hh\", \"inc\", \"mm\", \"m\"],","highlight_start":13,"highlight_end":22}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"packages/singularity-code-analysis/src/parser_registry.rs","byte_start":6239,"byte_end":6240,"line_start":206,"line_end":206,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            _ => vec![],","highlight_start":13,"highlight_end":14}],"label":"...and 7 other patterns collectively make this unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:206:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _ => vec![],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno value can reach this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: multiple earlier patterns match some of the same values\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/singularity-code-analysis/src/parser_registry.rs:206:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            LANG::Javascript => vec![\"js\", \"mjs\", \"jsx\"],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            LANG::Java => vec![\"java\"],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            LANG::Rust => vec![\"rs\"],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            LANG::Cpp => vec![\"cpp\", \"cxx\", \"cc\", \"hxx\", \"hpp\", \"c\", \"h\", \"hh\", \"inc\", \"mm\", \"m\"],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _ => vec![],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m...and 7 other patterns collectively make this unreachable\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 9 previous errors; 6 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 9 previous errors; 6 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0191, E0277, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0191, E0277, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0191`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0191`.\u001b[0m\n"}
